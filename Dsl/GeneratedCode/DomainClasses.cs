//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass MobileAppModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7543a778-03bd-4f40-b601-a47b169eb0e7")]
	public partial class MobileAppModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MobileAppModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7543a778, 0x03bd, 0x4f40, 0xb6, 0x01, 0xa4, 0x7b, 0x16, 0x9e, 0xb0, 0xe7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileAppModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileAppModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Services opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Services.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Service> Services
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(global::Company.MobileDSL.MobileAppModelHasServices.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region Controllers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Controllers.
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Controller> Controllers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region States opposite domain role accessor
		
		/// <summary>
		/// Gets a list of States.
		/// Description for Company.MobileDSL.MobileAppModelHasStates.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> States
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region DataLinked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DataLinked.
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DataLink> DataLinked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DataLink>, DataLink>(global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region ShowFormed opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ShowFormed.
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ShowForm> ShowFormed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ShowForm>, ShowForm>(global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region ServiceInvoked opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ServiceInvoked.
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceInvoke> ServiceInvoked
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceInvoke>, ServiceInvoke>(global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region ServiceMsg opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ServiceMsg.
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ServiceMsg> ServiceMsg
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceMsg>, ServiceMsg>(global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region AppCoded opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AppCoded.
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AppCode> AppCoded
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AppCode>, AppCode>(global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Service.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Controller.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.State.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.DataLink.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ShowForm.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ServiceInvoke.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.ServiceMsg.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.AppCode.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.Service sourceService1 = sourceElement as global::Company.MobileDSL.Service;
			if (sourceService1 != null)
			{
				// Create link for path MobileAppModelHasServices.Services
				this.Services.Add(sourceService1);

				return;
			}
				
			global::Company.MobileDSL.Controller sourceController2 = sourceElement as global::Company.MobileDSL.Controller;
			if (sourceController2 != null)
			{
				// Create link for path MobileAppModelHasControllers.Controllers
				this.Controllers.Add(sourceController2);

				return;
			}
				
			global::Company.MobileDSL.State sourceState3 = sourceElement as global::Company.MobileDSL.State;
			if (sourceState3 != null)
			{
				// Create link for path MobileAppModelHasStates.States
				this.States.Add(sourceState3);

				return;
			}
				
			global::Company.MobileDSL.DataLink sourceDataLink4 = sourceElement as global::Company.MobileDSL.DataLink;
			if (sourceDataLink4 != null)
			{
				// Create link for path MobileAppModelHasDataLinked.DataLinked
				this.DataLinked.Add(sourceDataLink4);

				return;
			}
				
			global::Company.MobileDSL.ShowForm sourceShowForm5 = sourceElement as global::Company.MobileDSL.ShowForm;
			if (sourceShowForm5 != null)
			{
				// Create link for path MobileAppModelHasShowFormed.ShowFormed
				this.ShowFormed.Add(sourceShowForm5);

				return;
			}
				
			global::Company.MobileDSL.ServiceInvoke sourceServiceInvoke6 = sourceElement as global::Company.MobileDSL.ServiceInvoke;
			if (sourceServiceInvoke6 != null)
			{
				// Create link for path MobileAppModelHasServiceInvoked.ServiceInvoked
				this.ServiceInvoked.Add(sourceServiceInvoke6);

				return;
			}
				
			global::Company.MobileDSL.ServiceMsg sourceServiceMsg7 = sourceElement as global::Company.MobileDSL.ServiceMsg;
			if (sourceServiceMsg7 != null)
			{
				// Create link for path MobileAppModelHasServiceMsg.ServiceMsg
				this.ServiceMsg.Add(sourceServiceMsg7);

				return;
			}
				
			global::Company.MobileDSL.AppCode sourceAppCode8 = sourceElement as global::Company.MobileDSL.AppCode;
			if (sourceAppCode8 != null)
			{
				// Create link for path MobileAppModelHasAppCoded.AppCoded
				this.AppCoded.Add(sourceAppCode8);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.Service sourceService1 = sourceElement as global::Company.MobileDSL.Service;
			if (sourceService1 != null)
			{
				// Delete link for path MobileAppModelHasServices.Services
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasServices.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceService1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasServices.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasServices.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.Controller sourceController2 = sourceElement as global::Company.MobileDSL.Controller;
			if (sourceController2 != null)
			{
				// Delete link for path MobileAppModelHasControllers.Controllers
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasControllers.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceController2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasControllers.ControllerDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.State sourceState3 = sourceElement as global::Company.MobileDSL.State;
			if (sourceState3 != null)
			{
				// Delete link for path MobileAppModelHasStates.States
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasStates.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceState3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasStates.StateDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.DataLink sourceDataLink4 = sourceElement as global::Company.MobileDSL.DataLink;
			if (sourceDataLink4 != null)
			{
				// Delete link for path MobileAppModelHasDataLinked.DataLinked
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasDataLinked.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceDataLink4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasDataLinked.DataLinkDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.ShowForm sourceShowForm5 = sourceElement as global::Company.MobileDSL.ShowForm;
			if (sourceShowForm5 != null)
			{
				// Delete link for path MobileAppModelHasShowFormed.ShowFormed
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasShowFormed.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceShowForm5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasShowFormed.ShowFormDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.ServiceInvoke sourceServiceInvoke6 = sourceElement as global::Company.MobileDSL.ServiceInvoke;
			if (sourceServiceInvoke6 != null)
			{
				// Delete link for path MobileAppModelHasServiceInvoked.ServiceInvoked
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasServiceInvoked.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceServiceInvoke6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.ServiceMsg sourceServiceMsg7 = sourceElement as global::Company.MobileDSL.ServiceMsg;
			if (sourceServiceMsg7 != null)
			{
				// Delete link for path MobileAppModelHasServiceMsg.ServiceMsg
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasServiceMsg.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceServiceMsg7))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId);
				}

				return;
			}
				
			global::Company.MobileDSL.AppCode sourceAppCode8 = sourceElement as global::Company.MobileDSL.AppCode;
			if (sourceAppCode8 != null)
			{
				// Delete link for path MobileAppModelHasAppCoded.AppCoded
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.MobileAppModelHasAppCoded.GetLinks((global::Company.MobileDSL.MobileAppModel)this, sourceAppCode8))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId, global::Company.MobileDSL.MobileAppModelHasAppCoded.AppCodeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Service
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Service.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Service.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("24892a57-2af7-4c79-a1db-3952728dc95a")]
	public partial class Service : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Service domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x24892a57, 0x2af7, 0x4c79, 0xa1, 0xdb, 0x39, 0x52, 0x72, 0x8d, 0xc9, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Service(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Service(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x622f1f8f, 0xa340, 0x416e, 0xb9, 0x81, 0x84, 0x21, 0xe8, 0x50, 0x15, 0xed);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.Service.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Service/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Service/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("622f1f8f-a340-416e-b981-8421e85015ed")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Service.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Service, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Service.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Service.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Service element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Service element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServices.ElementDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServices.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Company.MobileDSL.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Service> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(global::Company.MobileDSL.ServiceReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Company.MobileDSL.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Service> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(global::Company.MobileDSL.ServiceReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Controller
	/// Description for Company.MobileDSL.Controller
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("713f730c-c1fb-4233-aae5-7270b98edd3b")]
	public partial class Controller : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Controller domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x713f730c, 0xc1fb, 0x4233, 0xaa, 0xe5, 0x72, 0x70, 0xb9, 0x8e, 0xdd, 0x3b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Controller(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x37039312, 0xe706, 0x4c25, 0xa5, 0x27, 0xf5, 0xb7, 0x33, 0xab, 0xd3, 0xe6);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.Controller.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Controller/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Controller/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("37039312-e706-4c25-a527-f5b733abd3e6")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region isStartController domain property code
		
		/// <summary>
		/// isStartController domain property Id.
		/// </summary>
		public static readonly global::System.Guid isStartControllerDomainPropertyId = new global::System.Guid(0x0d18b76f, 0xede7, 0x4df4, 0x9c, 0xb7, 0x81, 0xb1, 0x29, 0x68, 0xda, 0x17);
		
		/// <summary>
		/// Storage for isStartController
		/// </summary>
		private global::System.Boolean isStartControllerPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of isStartController domain property.
		/// Description for Company.MobileDSL.Controller.Is Start Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Controller/isStartController.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Controller/isStartController.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0d18b76f-ede7-4df4-9cb7-81b12968da17")]
		public global::System.Boolean isStartController
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isStartControllerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				isStartControllerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Controller.isStartController domain property.
		/// </summary>
		internal sealed partial class isStartControllerPropertyHandler : DslModeling::DomainPropertyValueHandler<Controller, global::System.Boolean>
		{
			private isStartControllerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Controller.isStartController domain property value handler.
			/// </summary>
			public static readonly isStartControllerPropertyHandler Instance = new isStartControllerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Controller.isStartController domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return isStartControllerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Controller element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isStartControllerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Controller element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isStartControllerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.Controller
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasControllers.ControllerDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasControllers.ControllerDomainRoleId, value);
			}
		}
		#endregion
		#region States opposite domain role accessor
		
		/// <summary>
		/// Gets a list of States.
		/// Description for Company.MobileDSL.ControllerReferencesStates.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> States
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.ControllerReferencesStates.ControllerDomainRoleId);
			}
		}
		#endregion
		#region Ports opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Ports.
		/// Description for Company.MobileDSL.ControllerHasPorts.Controller
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Port> Ports
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.Port.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.Port sourcePort1 = sourceElement as global::Company.MobileDSL.Port;
			if (sourcePort1 != null)
			{
				// Create link for path ControllerHasPorts.Ports
				this.Ports.Add(sourcePort1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.Port sourcePort1 = sourceElement as global::Company.MobileDSL.Port;
			if (sourcePort1 != null)
			{
				// Delete link for path ControllerHasPorts.Ports
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ControllerHasPorts.GetLinks((global::Company.MobileDSL.Controller)this, sourcePort1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId, global::Company.MobileDSL.ControllerHasPorts.PortDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass State
	/// Description for Company.MobileDSL.State
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c4875a64-d4a9-4725-86f2-2c121dbb78ec")]
	public partial class State : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// State domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc4875a64, 0xd4a9, 0x4725, 0x86, 0xf2, 0x2c, 0x12, 0x1d, 0xbb, 0x78, 0xec);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public State(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x45083901, 0xbbc0, 0x43a8, 0x88, 0xc0, 0x45, 0xec, 0xba, 0xcb, 0xfa, 0x62);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.State.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("45083901-bbc0-43a8-88c0-45ecbacbfa62")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region isStartState domain property code
		
		/// <summary>
		/// isStartState domain property Id.
		/// </summary>
		public static readonly global::System.Guid isStartStateDomainPropertyId = new global::System.Guid(0xe506ea60, 0xb2f2, 0x42a6, 0xa4, 0x65, 0x6e, 0x13, 0x28, 0x4c, 0xce, 0xf4);
		
		/// <summary>
		/// Storage for isStartState
		/// </summary>
		private global::System.Boolean isStartStatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of isStartState domain property.
		/// Description for Company.MobileDSL.State.Is Start State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.State/isStartState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.State/isStartState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e506ea60-b2f2-42a6-a465-6e13284ccef4")]
		public global::System.Boolean isStartState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isStartStatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				isStartStatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the State.isStartState domain property.
		/// </summary>
		internal sealed partial class isStartStatePropertyHandler : DslModeling::DomainPropertyValueHandler<State, global::System.Boolean>
		{
			private isStartStatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the State.isStartState domain property value handler.
			/// </summary>
			public static readonly isStartStatePropertyHandler Instance = new isStartStatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the State.isStartState domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return isStartStateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(State element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isStartStatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(State element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isStartStatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasStates.State
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasStates.StateDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasStates.StateDomainRoleId, value);
			}
		}
		#endregion
		#region ShowForm opposite domain role accessor
		/// <summary>
		/// Gets or sets ShowForm.
		/// Description for Company.MobileDSL.StateReferencesShowForm.State
		/// </summary>
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateReferencesShowForm.StateDomainRoleId) as ShowForm;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateReferencesShowForm.StateDomainRoleId, value);
			}
		}
		#endregion
		#region Controller opposite domain role accessor
		/// <summary>
		/// Gets or sets Controller.
		/// Description for Company.MobileDSL.ControllerReferencesStates.State
		/// </summary>
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ControllerReferencesStates.StateDomainRoleId) as Controller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ControllerReferencesStates.StateDomainRoleId, value);
			}
		}
		#endregion
		#region Port opposite domain role accessor
		/// <summary>
		/// Gets or sets Port.
		/// Description for Company.MobileDSL.PortReferencesState.State
		/// </summary>
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.PortReferencesState.StateDomainRoleId) as Port;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.PortReferencesState.StateDomainRoleId, value);
			}
		}
		#endregion
		#region PortFromState opposite domain role accessor
		/// <summary>
		/// Gets or sets PortFromState.
		/// Description for Company.MobileDSL.StateReferencesPortFromState.State
		/// </summary>
		public virtual Port PortFromState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateReferencesPortFromState.StateDomainRoleId) as Port;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateReferencesPortFromState.StateDomainRoleId, value);
			}
		}
		#endregion
		#region TargetStated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetStated.
		/// Description for Company.MobileDSL.StateReferencesTargetStated.SourceState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> TargetStated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			}
		}
		#endregion
		#region SourceStated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceStated.
		/// Description for Company.MobileDSL.StateReferencesTargetStated.TargetState
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> SourceStated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesTargetStated.TargetStateDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass DataLink
	/// Description for Company.MobileDSL.DataLink
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.DataLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.DataLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2cf55d27-9242-4e37-91ad-6fc505e1d26b")]
	public partial class DataLink : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DataLink domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2cf55d27, 0x9242, 0x4e37, 0x91, 0xad, 0x6f, 0xc5, 0x05, 0xe1, 0xd2, 0x6b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataLink(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DataLink(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x393eff47, 0x1184, 0x4f22, 0xa6, 0x32, 0xe2, 0x78, 0x62, 0x8b, 0x67, 0xf2);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.DataLink.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.DataLink/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.DataLink/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("393eff47-1184-4f22-a632-e278628b67f2")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DataLink.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DataLink, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DataLink.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DataLink.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DataLink element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DataLink element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.DataLink
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasDataLinked.DataLinkDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasDataLinked.DataLinkDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ShowForm
	/// Description for Company.MobileDSL.ShowForm
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("26748806-36cc-457b-9c95-04672d310914")]
	public partial class ShowForm : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ShowForm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26748806, 0x36cc, 0x457b, 0x9c, 0x95, 0x04, 0x67, 0x2d, 0x31, 0x09, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ShowForm(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ShowForm(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9bb1da53, 0x2be8, 0x487f, 0xa5, 0xf8, 0xcc, 0x79, 0x3b, 0xc6, 0xe1, 0xae);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.ShowForm.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowForm/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowForm/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9bb1da53-2be8-487f-a5f8-cc793bc6e1ae")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ShowForm.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ShowForm, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ShowForm.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ShowForm.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ShowForm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ShowForm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Background domain property code
		
		/// <summary>
		/// Background domain property Id.
		/// </summary>
		public static readonly global::System.Guid BackgroundDomainPropertyId = new global::System.Guid(0x0e52fa60, 0xf7f2, 0x4891, 0x94, 0xfd, 0x64, 0xbd, 0xcc, 0x69, 0x9b, 0x63);
		
		/// <summary>
		/// Storage for Background
		/// </summary>
		private global::System.String backgroundPropertyStorage = "Black";
		
		/// <summary>
		/// Gets or sets the value of Background domain property.
		/// Description for Company.MobileDSL.ShowForm.Background
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowForm/Background.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowForm/Background.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Black")]
		[DslModeling::DomainObjectId("0e52fa60-f7f2-4891-94fd-64bdcc699b63")]
		public global::System.String Background
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return backgroundPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BackgroundPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ShowForm.Background domain property.
		/// </summary>
		internal sealed partial class BackgroundPropertyHandler : DslModeling::DomainPropertyValueHandler<ShowForm, global::System.String>
		{
			private BackgroundPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ShowForm.Background domain property value handler.
			/// </summary>
			public static readonly BackgroundPropertyHandler Instance = new BackgroundPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ShowForm.Background domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BackgroundDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ShowForm element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.backgroundPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ShowForm element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.backgroundPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.ShowForm
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasShowFormed.ShowFormDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasShowFormed.ShowFormDomainRoleId, value);
			}
		}
		#endregion
		#region GraphicElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of GraphicElements.
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.ShowForm
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<GraphicElement> GraphicElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicElement>, GraphicElement>(global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
			}
		}
		#endregion
		#region Stated opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Stated.
		/// Description for Company.MobileDSL.StateReferencesShowForm.ShowForm
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<State> Stated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(global::Company.MobileDSL.StateReferencesShowForm.ShowFormDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.MobileDSL.GraphicElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.MobileDSL.GraphicElement sourceGraphicElement1 = sourceElement as global::Company.MobileDSL.GraphicElement;
			if (sourceGraphicElement1 != null)
			{
				// Create link for path ShowFormHasGraphicElements.GraphicElements
				this.GraphicElements.Add(sourceGraphicElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.MobileDSL.GraphicElement sourceGraphicElement1 = sourceElement as global::Company.MobileDSL.GraphicElement;
			if (sourceGraphicElement1 != null)
			{
				// Delete link for path ShowFormHasGraphicElements.GraphicElements
				
				foreach (DslModeling::ElementLink link in global::Company.MobileDSL.ShowFormHasGraphicElements.GetLinks((global::Company.MobileDSL.ShowForm)this, sourceGraphicElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId, global::Company.MobileDSL.ShowFormHasGraphicElements.GraphicElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass GraphicElement
	/// Description for Company.MobileDSL.GraphicElement
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.GraphicElement.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.GraphicElement.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f2ecd8a4-8626-41db-b74a-f745561517d1")]
	public partial class GraphicElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GraphicElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf2ecd8a4, 0x8626, 0x41db, 0xb7, 0x4a, 0xf7, 0x45, 0x56, 0x15, 0x17, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GraphicElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x82b30dcc, 0xb47f, 0x4481, 0x93, 0xe9, 0x0c, 0x33, 0xa8, 0xca, 0x26, 0xa1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.GraphicElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.GraphicElement/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.GraphicElement/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("82b30dcc-b47f-4481-93e9-0c33a8ca26a1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the GraphicElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<GraphicElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the GraphicElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the GraphicElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(GraphicElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(GraphicElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowForm opposite domain role accessor
		/// <summary>
		/// Gets or sets ShowForm.
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.GraphicElement
		/// </summary>
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ShowFormHasGraphicElements.GraphicElementDomainRoleId) as ShowForm;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ShowFormHasGraphicElements.GraphicElementDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Input
	/// Description for Company.MobileDSL.Input
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Input.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Input.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("115e2941-7be5-4bbe-b13a-a93ffdcdd843")]
	public partial class Input : GraphicElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Input domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x115e2941, 0x7be5, 0x4bbe, 0xb1, 0x3a, 0xa9, 0x3f, 0xfd, 0xcd, 0xd8, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Input(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Input(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LeftText domain property code
		
		/// <summary>
		/// LeftText domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftTextDomainPropertyId = new global::System.Guid(0x69f621c2, 0x9567, 0x4f37, 0xb6, 0x54, 0xe6, 0x5b, 0x5c, 0xb7, 0xc7, 0x66);
		
		/// <summary>
		/// Storage for LeftText
		/// </summary>
		private global::System.String leftTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of LeftText domain property.
		/// Description for Company.MobileDSL.Input.Left Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Input/LeftText.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Input/LeftText.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("69f621c2-9567-4f37-b654-e65b5cb7c766")]
		public global::System.String LeftText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Input.LeftText domain property.
		/// </summary>
		internal sealed partial class LeftTextPropertyHandler : DslModeling::DomainPropertyValueHandler<Input, global::System.String>
		{
			private LeftTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Input.LeftText domain property value handler.
			/// </summary>
			public static readonly LeftTextPropertyHandler Instance = new LeftTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Input.LeftText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Input element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Input element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InputMode domain property code
		
		/// <summary>
		/// InputMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid InputModeDomainPropertyId = new global::System.Guid(0x753c26a8, 0xb35c, 0x499f, 0xba, 0x09, 0x37, 0x5f, 0x28, 0x35, 0x4e, 0x40);
		
		/// <summary>
		/// Storage for InputMode
		/// </summary>
		private global::System.String inputModePropertyStorage = "Text";
		
		/// <summary>
		/// Gets or sets the value of InputMode domain property.
		/// Description for Company.MobileDSL.Input.Input Mode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Input/InputMode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Input/InputMode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Text")]
		[DslModeling::DomainObjectId("753c26a8-b35c-499f-ba09-375f28354e40")]
		public global::System.String InputMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inputModePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InputModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Input.InputMode domain property.
		/// </summary>
		internal sealed partial class InputModePropertyHandler : DslModeling::DomainPropertyValueHandler<Input, global::System.String>
		{
			private InputModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Input.InputMode domain property value handler.
			/// </summary>
			public static readonly InputModePropertyHandler Instance = new InputModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Input.InputMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InputModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Input element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inputModePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Input element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inputModePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Label
	/// Description for Company.MobileDSL.Label
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Label.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Label.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d9c7229a-95b7-4461-acce-9f37578dfe97")]
	public partial class Label : GraphicElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Label domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9c7229a, 0x95b7, 0x4461, 0xac, 0xce, 0x9f, 0x37, 0x57, 0x8d, 0xfe, 0x97);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Label(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Label(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0xd5b6bf7e, 0xee09, 0x48fa, 0xbb, 0xaa, 0x2c, 0xa0, 0x8d, 0xe1, 0xa0, 0xdd);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.Label.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Label/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Label/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5b6bf7e-ee09-48fa-bbaa-2ca08de1a0dd")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Label.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Label, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Label.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Label.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Label element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Label element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ServiceInvoke
	/// Description for Company.MobileDSL.ServiceInvoke
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceInvoke.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ServiceInvoke.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("033d3c25-bf44-4e43-a27b-c884fbbccff2")]
	public partial class ServiceInvoke : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceInvoke domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x033d3c25, 0xbf44, 0x4e43, 0xa2, 0x7b, 0xc8, 0x84, 0xfb, 0xbc, 0xcf, 0xf2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceInvoke(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceInvoke(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x11e9c8d9, 0xd26d, 0x4e5a, 0xb5, 0x49, 0x4b, 0xfc, 0x51, 0xd5, 0xb2, 0x89);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.ServiceInvoke.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceInvoke/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceInvoke/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("11e9c8d9-d26d-4e5a-b549-4bfc51d5b289")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceInvoke.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceInvoke, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceInvoke.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceInvoke.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceInvoke element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceInvoke element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvoke
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ServiceMsg
	/// Description for Company.MobileDSL.ServiceMsg
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceMsg.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ServiceMsg.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("37af1266-f724-42a1-a742-aa126d463911")]
	public partial class ServiceMsg : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ServiceMsg domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x37af1266, 0xf724, 0x42a1, 0xa7, 0x42, 0xaa, 0x12, 0x6d, 0x46, 0x39, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceMsg(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ServiceMsg(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf1c73aca, 0x276e, 0x4ee5, 0x9d, 0x19, 0xa4, 0xdf, 0xb8, 0x2f, 0xdb, 0x4e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.ServiceMsg.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceMsg/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceMsg/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f1c73aca-276e-4ee5-9d19-a4dfb82fdb4e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ServiceMsg.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ServiceMsg, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ServiceMsg.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ServiceMsg.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ServiceMsg element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ServiceMsg element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsg
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass AppCode
	/// Description for Company.MobileDSL.AppCode
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6a6f7e2a-fb4a-4e1d-82b2-591c082b7813")]
	public partial class AppCode : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AppCode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6a6f7e2a, 0xfb4a, 0x4e1d, 0x82, 0xb2, 0x59, 0x1c, 0x08, 0x2b, 0x78, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppCode(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AppCode(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x753b2b91, 0xce69, 0x40a5, 0xbd, 0x1c, 0x84, 0xf8, 0x6c, 0xb9, 0xcc, 0x4c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.AppCode.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCode/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("753b2b91-ce69-40a5-bd1c-84f86cb9cc4c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AppCode.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AppCode, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AppCode.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AppCode.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AppCode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AppCode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x44e126d2, 0xe8ea, 0x436c, 0xad, 0xfa, 0xe8, 0x86, 0x36, 0xa0, 0x0f, 0x9f);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.AppCode.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.AppCode/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.AppCode/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("44e126d2-e8ea-436c-adfa-e88636a00f9f")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AppCode.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<AppCode, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AppCode.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AppCode.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AppCode element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AppCode element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MobileAppModel opposite domain role accessor
		/// <summary>
		/// Gets or sets MobileAppModel.
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.AppCode
		/// </summary>
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasAppCoded.AppCodeDomainRoleId) as MobileAppModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.MobileAppModelHasAppCoded.AppCodeDomainRoleId, value);
			}
		}
		#endregion
		#region Buttoned opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Buttoned.
		/// Description for Company.MobileDSL.ButtonReferencesAppCode.AppCode
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Button> Buttoned
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(global::Company.MobileDSL.ButtonReferencesAppCode.AppCodeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Button
	/// Description for Company.MobileDSL.Button
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Button.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Button.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14786ab4-ac42-45cc-8391-459ffaa3a079")]
	public partial class Button : GraphicElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Button domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14786ab4, 0xac42, 0x45cc, 0x83, 0x91, 0x45, 0x9f, 0xfa, 0xa3, 0xa0, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x6188665c, 0x56ce, 0x453d, 0xb2, 0x6f, 0x7f, 0x8d, 0xe8, 0xdb, 0xe6, 0x11);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Description for Company.MobileDSL.Button.Text
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Button/Text.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Button/Text.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6188665c-56ce-453d-b26f-7f8de8dbe611")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Button.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Button, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Button.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Button.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Button element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Button element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AppCode opposite domain role accessor
		/// <summary>
		/// Gets or sets AppCode.
		/// Description for Company.MobileDSL.ButtonReferencesAppCode.Button
		/// </summary>
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ButtonReferencesAppCode.ButtonDomainRoleId) as AppCode;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ButtonReferencesAppCode.ButtonDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass DropBox
	/// Description for Company.MobileDSL.DropBox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.DropBox.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.DropBox.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("87670d15-720b-46ca-a665-c3d05660e116")]
	public partial class DropBox : GraphicElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DropBox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x87670d15, 0x720b, 0x46ca, 0xa6, 0x65, 0xc3, 0xd0, 0x56, 0x60, 0xe1, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DropBox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DropBox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Items domain property code
		
		/// <summary>
		/// Items domain property Id.
		/// </summary>
		public static readonly global::System.Guid ItemsDomainPropertyId = new global::System.Guid(0xb929f53f, 0xb213, 0x4be7, 0x9c, 0x29, 0x71, 0xe0, 0x5d, 0x40, 0xfd, 0x05);
		
		/// <summary>
		/// Storage for Items
		/// </summary>
		private global::System.String itemsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Items domain property.
		/// Description for Company.MobileDSL.DropBox.Items
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.DropBox/Items.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.DropBox/Items.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b929f53f-b213-4be7-9c29-71e05d40fd05")]
		public global::System.String Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return itemsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ItemsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DropBox.Items domain property.
		/// </summary>
		internal sealed partial class ItemsPropertyHandler : DslModeling::DomainPropertyValueHandler<DropBox, global::System.String>
		{
			private ItemsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DropBox.Items domain property value handler.
			/// </summary>
			public static readonly ItemsPropertyHandler Instance = new ItemsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DropBox.Items domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ItemsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DropBox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.itemsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DropBox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.itemsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass ListBox
	/// Description for Company.MobileDSL.ListBox
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ListBox.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ListBox.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("64059010-2d6a-4d88-b2a7-fc7c38c67743")]
	public partial class ListBox : GraphicElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ListBox domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x64059010, 0x2d6a, 0x4d88, 0xb2, 0xa7, 0xfc, 0x7c, 0x38, 0xc6, 0x77, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ListBox(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ListBox(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Items domain property code
		
		/// <summary>
		/// Items domain property Id.
		/// </summary>
		public static readonly global::System.Guid ItemsDomainPropertyId = new global::System.Guid(0xa618df8d, 0x8384, 0x4423, 0xb7, 0xcb, 0x20, 0xe2, 0x4a, 0xa6, 0x41, 0x49);
		
		/// <summary>
		/// Storage for Items
		/// </summary>
		private global::System.String itemsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Items domain property.
		/// Description for Company.MobileDSL.ListBox.Items
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ListBox/Items.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ListBox/Items.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a618df8d-8384-4423-b7cb-20e24aa64149")]
		public global::System.String Items
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return itemsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ItemsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ListBox.Items domain property.
		/// </summary>
		internal sealed partial class ItemsPropertyHandler : DslModeling::DomainPropertyValueHandler<ListBox, global::System.String>
		{
			private ItemsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ListBox.Items domain property value handler.
			/// </summary>
			public static readonly ItemsPropertyHandler Instance = new ItemsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ListBox.Items domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ItemsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ListBox element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.itemsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ListBox element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.itemsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainClass Port
	/// Description for Company.MobileDSL.Port
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("369f2394-402f-4329-b1f6-0398e4a60ef4")]
	public partial class Port : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Port domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x369f2394, 0x402f, 0x4329, 0xb1, 0xf6, 0x03, 0x98, 0xe4, 0xa6, 0x0e, 0xf4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Port(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Port(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x34504a08, 0x0df3, 0x4b93, 0x9f, 0x93, 0x86, 0x7f, 0xc4, 0xa4, 0xdc, 0xf3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.MobileDSL.Port.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.Port/Name.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.Port/Name.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("34504a08-0df3-4b93-9f93-867fc4a4dcf3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Port.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Port, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Port.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Port.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Port element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Port element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Controller opposite domain role accessor
		/// <summary>
		/// Gets or sets Controller.
		/// Description for Company.MobileDSL.ControllerHasPorts.Port
		/// </summary>
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.ControllerHasPorts.PortDomainRoleId) as Controller;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.ControllerHasPorts.PortDomainRoleId, value);
			}
		}
		#endregion
		#region TargetPort opposite domain role accessor
		/// <summary>
		/// Gets or sets TargetPort.
		/// Description for Company.MobileDSL.PortReferencesTargetPort.SourcePort
		/// </summary>
		public virtual Port TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.PortReferencesTargetPort.SourcePortDomainRoleId) as Port;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.PortReferencesTargetPort.SourcePortDomainRoleId, value);
			}
		}
		#endregion
		#region SourcePort opposite domain role accessor
		/// <summary>
		/// Gets or sets SourcePort.
		/// Description for Company.MobileDSL.PortReferencesTargetPort.TargetPort
		/// </summary>
		public virtual Port SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.PortReferencesTargetPort.TargetPortDomainRoleId) as Port;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.PortReferencesTargetPort.TargetPortDomainRoleId, value);
			}
		}
		#endregion
		#region State opposite domain role accessor
		/// <summary>
		/// Gets or sets State.
		/// Description for Company.MobileDSL.PortReferencesState.Port
		/// </summary>
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.PortReferencesState.PortDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.PortReferencesState.PortDomainRoleId, value);
			}
		}
		#endregion
		#region StateFromPort opposite domain role accessor
		/// <summary>
		/// Gets or sets StateFromPort.
		/// Description for Company.MobileDSL.StateReferencesPortFromState.Port
		/// </summary>
		public virtual State StateFromPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.MobileDSL.StateReferencesPortFromState.PortDomainRoleId) as State;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.MobileDSL.StateReferencesPortFromState.PortDomainRoleId, value);
			}
		}
		#endregion
	}
}
