//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasServices
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServices.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServices.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1e8b579c-469a-42c2-9544-2767371c0e6d")]
	public partial class MobileAppModelHasServices : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasServices domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e8b579c, 0x469a, 0x42c2, 0x95, 0x44, 0x27, 0x67, 0x37, 0x1c, 0x0e, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasServices link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">Service to use as the target of the relationship.</param>
		public MobileAppModelHasServices(MobileAppModel source, Service target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasServices.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasServices.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServices(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServices(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServices(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServices(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xe6c4156f, 0x1227, 0x4494, 0xa0, 0x61, 0xb7, 0xd4, 0xb2, 0x3c, 0x3f, 0x7b);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServices/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServices/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Services", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServices/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e6c4156f-1227-4494-a061-b7d4b23c3f7b")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a Service
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(Service element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(Service element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x1fab62c9, 0x87ec, 0x4c8f, 0x86, 0xc6, 0x78, 0xca, 0xb9, 0x85, 0xf4, 0x07);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServices/Element.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServices/Element.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServices/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1fab62c9-87ec-4c8f-86c6-78cab985f407")]
		public virtual Service Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Service)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Services of a MobileAppModel
		/// <summary>
		/// Gets a list of Services.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Service> GetServices(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasServices links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServices> GetLinksToServices ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServices>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasServices.MobileAppModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the MobileAppModelHasServices link to a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServices GetLinkToMobileAppModel (global::Company.MobileDSL.Service elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServices>(elementInstance, global::Company.MobileDSL.MobileAppModelHasServices.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasServices instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasServices links between a given MobileAppModel and a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServices> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Service target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServices> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServices>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServices>(source, global::Company.MobileDSL.MobileAppModelHasServices.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServices link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasServices link between a given MobileAppModeland a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServices GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Service target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServices> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServices>(source, global::Company.MobileDSL.MobileAppModelHasServices.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServices link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ServiceReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceReferencesTargets.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ServiceReferencesTargets.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f9e3a406-a3af-4230-97e1-4a697785b1ea")]
	public partial class ServiceReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ServiceReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf9e3a406, 0xa3af, 0x4230, 0x97, 0xe1, 0x4a, 0x69, 0x77, 0x85, 0xb1, 0xea);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ServiceReferencesTargets link in the same Partition as the given Service
		/// </summary>
		/// <param name="source">Service to use as the source of the relationship.</param>
		/// <param name="target">Service to use as the target of the relationship.</param>
		public ServiceReferencesTargets(Service source, Service target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ServiceReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ServiceReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ServiceReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ServiceReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7d67102a, 0x74d2, 0x4122, 0x80, 0x4c, 0x7e, 0xad, 0xf9, 0xec, 0xce, 0xcf);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.MobileDSL.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceReferencesTargets/Source.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceReferencesTargets/Source.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.MobileDSL.ServiceReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d67102a-74d2-4122-804c-7eadf9eccecf")]
		public virtual Service Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Service)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a Service
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Service> GetSources(Service element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x2d900298, 0xfbf7, 0x47a1, 0xa1, 0x91, 0xf2, 0x96, 0x2d, 0x20, 0x51, 0x72);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.MobileDSL.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ServiceReferencesTargets/Target.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ServiceReferencesTargets/Target.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.MobileDSL.ServiceReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2d900298-fbf7-47a1-a191-f2962d205172")]
		public virtual Service Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Service)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a Service
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Service> GetTargets(Service element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Service>, Service>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ServiceReferencesTargets links to a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ServiceReferencesTargets> GetLinksToTargets ( global::Company.MobileDSL.Service sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ServiceReferencesTargets>(sourceInstance, global::Company.MobileDSL.ServiceReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ServiceReferencesTargets links to a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ServiceReferencesTargets> GetLinksToSources ( global::Company.MobileDSL.Service targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ServiceReferencesTargets>(targetInstance, global::Company.MobileDSL.ServiceReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region ServiceReferencesTargets instance accessors
		
		/// <summary>
		/// Get any ServiceReferencesTargets links between a given Service and a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ServiceReferencesTargets> GetLinks( global::Company.MobileDSL.Service source, global::Company.MobileDSL.Service target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ServiceReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ServiceReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ServiceReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ServiceReferencesTargets>(source, global::Company.MobileDSL.ServiceReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.ServiceReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ServiceReferencesTargets link between a given Serviceand a Service.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ServiceReferencesTargets GetLink( global::Company.MobileDSL.Service source, global::Company.MobileDSL.Service target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ServiceReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ServiceReferencesTargets>(source, global::Company.MobileDSL.ServiceReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.ServiceReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasControllers
	/// Description for Company.MobileDSL.MobileAppModelHasControllers
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("78177309-8630-43cd-8e60-f46d23c491b2")]
	public partial class MobileAppModelHasControllers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasControllers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78177309, 0x8630, 0x43cd, 0x8e, 0x60, 0xf4, 0x6d, 0x23, 0xc4, 0x91, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasControllers link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public MobileAppModelHasControllers(MobileAppModel source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasControllers.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasControllers.ControllerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasControllers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasControllers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasControllers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasControllers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x80bde2c8, 0xcc01, 0x4ca0, 0xb5, 0x41, 0x17, 0x91, 0xe6, 0x48, 0x48, 0x55);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Controllers", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("80bde2c8-cc01-4ca0-b541-1791e6484855")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a Controller
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(Controller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ControllerDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(Controller element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ControllerDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xa72e60c4, 0x7d2c, 0x4fa3, 0xaf, 0x21, 0x69, 0x15, 0x61, 0xb7, 0x1a, 0x8a);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasControllers/Controller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a72e60c4-7d2c-4fa3-af21-691561b71a8a")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controllers of a MobileAppModel
		/// <summary>
		/// Gets a list of Controllers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetControllers(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasControllers links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasControllers> GetLinksToControllers ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the MobileAppModelHasControllers link to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasControllers GetLinkToMobileAppModel (global::Company.MobileDSL.Controller controllerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(controllerInstance, global::Company.MobileDSL.MobileAppModelHasControllers.ControllerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Controller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasControllers instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasControllers links between a given MobileAppModel and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasControllers> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasControllers> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasControllers>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(source, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasControllers link between a given MobileAppModeland a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasControllers GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(source, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasStates
	/// Description for Company.MobileDSL.MobileAppModelHasStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6d5dd34f-f6a8-47a0-89d7-95bedbc7843e")]
	public partial class MobileAppModelHasStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d5dd34f, 0xf6a8, 0x47a0, 0x89, 0xd7, 0x95, 0xbe, 0xdb, 0xc7, 0x84, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasStates link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public MobileAppModelHasStates(MobileAppModel source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasStates.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasStates.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x91c45b43, 0x997c, 0x45fc, 0x86, 0x73, 0x52, 0xf2, 0xe4, 0xf0, 0x0e, 0x07);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasStates.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "States", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("91c45b43-997c-45fc-8673-52f2e4f00e07")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a State
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(State element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xe5c95eb7, 0xd293, 0x4dc6, 0x85, 0x11, 0x17, 0xc5, 0xea, 0x21, 0xec, 0x99);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.MobileAppModelHasStates.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasStates/State.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e5c95eb7-d293-4dc6-8511-17c5ea21ec99")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access States of a MobileAppModel
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStates(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasStates links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasStates> GetLinksToStates ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the MobileAppModelHasStates link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasStates GetLinkToMobileAppModel (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(stateInstance, global::Company.MobileDSL.MobileAppModelHasStates.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasStates instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasStates links between a given MobileAppModel and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasStates> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(source, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasStates link between a given MobileAppModeland a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasStates GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(source, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasDataLinked
	/// Description for Company.MobileDSL.MobileAppModelHasDataLinked
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("069dab2a-9667-47cc-b78a-9c0883e88115")]
	public partial class MobileAppModelHasDataLinked : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasDataLinked domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x069dab2a, 0x9667, 0x47cc, 0xb7, 0x8a, 0x9c, 0x08, 0x83, 0xe8, 0x81, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasDataLinked link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">DataLink to use as the target of the relationship.</param>
		public MobileAppModelHasDataLinked(MobileAppModel source, DataLink target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasDataLinked.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasDataLinked.DataLinkDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasDataLinked(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasDataLinked(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasDataLinked(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasDataLinked(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x92b10cc4, 0x0a5f, 0x4978, 0x9a, 0xd6, 0xc9, 0xfa, 0x8a, 0x6a, 0x4b, 0x7a);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataLinked", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92b10cc4-0a5f-4978-9ad6-c9fa8a6a4b7a")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a DataLink
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(DataLink element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataLinkDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(DataLink element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataLinkDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region DataLink domain role code
		
		/// <summary>
		/// DataLink domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataLinkDomainRoleId = new global::System.Guid(0xdf71abd5, 0x7d2d, 0x402e, 0x8c, 0x26, 0x25, 0x77, 0x40, 0xc2, 0x0d, 0x5f);
		
		/// <summary>
		/// DomainRole DataLink
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.DataLink
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("df71abd5-7d2d-402e-8c26-257740c20d5f")]
		public virtual DataLink DataLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataLink)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataLinkDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataLinkDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataLinked of a MobileAppModel
		/// <summary>
		/// Gets a list of DataLinked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataLink> GetDataLinked(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataLink>, DataLink>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasDataLinked links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasDataLinked> GetLinksToDataLinked ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
		}
		#endregion
		#region DataLink link accessor
		/// <summary>
		/// Get the MobileAppModelHasDataLinked link to a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasDataLinked GetLinkToMobileAppModel (global::Company.MobileDSL.DataLink dataLinkInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(dataLinkInstance, global::Company.MobileDSL.MobileAppModelHasDataLinked.DataLinkDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataLink not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasDataLinked instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasDataLinked links between a given MobileAppModel and a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasDataLinked> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.DataLink target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasDataLinked> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasDataLinked>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(source, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasDataLinked link in links )
			{
				if ( target.Equals(link.DataLink) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasDataLinked link between a given MobileAppModeland a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasDataLinked GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.DataLink target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(source, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasDataLinked link in links )
			{
				if ( target.Equals(link.DataLink) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasShowFormed
	/// Description for Company.MobileDSL.MobileAppModelHasShowFormed
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f4e9584f-aefe-4347-a863-723e50f495b3")]
	public partial class MobileAppModelHasShowFormed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasShowFormed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4e9584f, 0xaefe, 0x4347, 0xa8, 0x63, 0x72, 0x3e, 0x50, 0xf4, 0x95, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasShowFormed link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ShowForm to use as the target of the relationship.</param>
		public MobileAppModelHasShowFormed(MobileAppModel source, ShowForm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasShowFormed.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasShowFormed.ShowFormDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasShowFormed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasShowFormed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasShowFormed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasShowFormed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xa5e7173b, 0x24d7, 0x40c0, 0xb3, 0x33, 0x1a, 0x75, 0xaa, 0x25, 0x78, 0xbe);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShowFormed", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a5e7173b-24d7-40c0-b333-1a75aa2578be")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ShowForm
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ShowForm element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShowFormDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ShowForm element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShowFormDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0x4c62b89f, 0xb555, 0x4ece, 0xb3, 0x90, 0xb7, 0x44, 0x1b, 0x9f, 0xa0, 0x69);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c62b89f-b555-4ece-b390-b7441b9fa069")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowFormed of a MobileAppModel
		/// <summary>
		/// Gets a list of ShowFormed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShowForm> GetShowFormed(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShowForm>, ShowForm>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasShowFormed links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasShowFormed> GetLinksToShowFormed ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the MobileAppModelHasShowFormed link to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasShowFormed GetLinkToMobileAppModel (global::Company.MobileDSL.ShowForm showFormInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(showFormInstance, global::Company.MobileDSL.MobileAppModelHasShowFormed.ShowFormDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShowForm not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasShowFormed instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasShowFormed links between a given MobileAppModel and a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasShowFormed> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasShowFormed> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasShowFormed>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(source, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasShowFormed link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasShowFormed link between a given MobileAppModeland a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasShowFormed GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(source, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasShowFormed link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ShowFormHasGraphicElements
	/// Description for Company.MobileDSL.ShowFormHasGraphicElements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c31b3eef-778e-411e-b78d-64b7c7189dbb")]
	public partial class ShowFormHasGraphicElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShowFormHasGraphicElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc31b3eef, 0x778e, 0x411e, 0xb7, 0x8d, 0x64, 0xb7, 0xc7, 0x18, 0x9d, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShowFormHasGraphicElements link in the same Partition as the given ShowForm
		/// </summary>
		/// <param name="source">ShowForm to use as the source of the relationship.</param>
		/// <param name="target">GraphicElement to use as the target of the relationship.</param>
		public ShowFormHasGraphicElements(ShowForm source, GraphicElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShowFormHasGraphicElements.ShowFormDomainRoleId, source), new DslModeling::RoleAssignment(ShowFormHasGraphicElements.GraphicElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasGraphicElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasGraphicElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasGraphicElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasGraphicElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0x213247a4, 0x0175, 0x42a9, 0xb8, 0xa7, 0x4d, 0xe7, 0xea, 0xe2, 0x6e, 0x3b);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GraphicElements", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("213247a4-0175-42a9-b8a7-4de7eae26e3b")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForm of a GraphicElement
		/// <summary>
		/// Gets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShowForm GetShowForm(GraphicElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicElementDomainRoleId) as ShowForm;
		}
		
		/// <summary>
		/// Sets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShowForm(GraphicElement element, ShowForm newShowForm)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicElementDomainRoleId, newShowForm);
		}
		#endregion
		#region GraphicElement domain role code
		
		/// <summary>
		/// GraphicElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicElementDomainRoleId = new global::System.Guid(0xaa171226, 0x245c, 0x452d, 0xb3, 0x00, 0x07, 0xc9, 0x62, 0x48, 0x58, 0x02);
		
		/// <summary>
		/// DomainRole GraphicElement
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.GraphicElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShowForm", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aa171226-245c-452d-b300-07c962485802")]
		public virtual GraphicElement GraphicElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GraphicElements of a ShowForm
		/// <summary>
		/// Gets a list of GraphicElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GraphicElement> GetGraphicElements(ShowForm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicElement>, GraphicElement>(element, ShowFormDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the list of ShowFormHasGraphicElements links to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasGraphicElements> GetLinksToGraphicElements ( global::Company.MobileDSL.ShowForm showFormInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(showFormInstance, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
		}
		#endregion
		#region GraphicElement link accessor
		/// <summary>
		/// Get the ShowFormHasGraphicElements link to a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasGraphicElements GetLinkToShowForm (global::Company.MobileDSL.GraphicElement graphicElementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(graphicElementInstance, global::Company.MobileDSL.ShowFormHasGraphicElements.GraphicElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShowFormHasGraphicElements instance accessors
		
		/// <summary>
		/// Get any ShowFormHasGraphicElements links between a given ShowForm and a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasGraphicElements> GetLinks( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.GraphicElement target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasGraphicElements> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasGraphicElements>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(source, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasGraphicElements link in links )
			{
				if ( target.Equals(link.GraphicElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShowFormHasGraphicElements link between a given ShowFormand a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasGraphicElements GetLink( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.GraphicElement target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(source, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasGraphicElements link in links )
			{
				if ( target.Equals(link.GraphicElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasServiceInvoked
	/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fcda6671-dcdf-437e-91d7-0614d98b8cf8")]
	public partial class MobileAppModelHasServiceInvoked : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasServiceInvoked domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcda6671, 0xdcdf, 0x437e, 0x91, 0xd7, 0x06, 0x14, 0xd9, 0x8b, 0x8c, 0xf8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasServiceInvoked link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ServiceInvoke to use as the target of the relationship.</param>
		public MobileAppModelHasServiceInvoked(MobileAppModel source, ServiceInvoke target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xe10cafe6, 0x58b4, 0x4a69, 0x89, 0x6d, 0x2d, 0x97, 0x33, 0x82, 0xcb, 0xbd);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceInvoked", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e10cafe6-58b4-4a69-896d-2d973382cbbd")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ServiceInvoke
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ServiceInvoke element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceInvokeDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ServiceInvoke element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceInvokeDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ServiceInvoke domain role code
		
		/// <summary>
		/// ServiceInvoke domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceInvokeDomainRoleId = new global::System.Guid(0x02cd9aca, 0x5d35, 0x45cc, 0x8f, 0x04, 0x19, 0xf1, 0x80, 0x3a, 0xb1, 0xc7);
		
		/// <summary>
		/// DomainRole ServiceInvoke
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvoke
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("02cd9aca-5d35-45cc-8f04-19f1803ab1c7")]
		public virtual ServiceInvoke ServiceInvoke
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceInvoke)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceInvokeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceInvokeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceInvoked of a MobileAppModel
		/// <summary>
		/// Gets a list of ServiceInvoked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceInvoke> GetServiceInvoked(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceInvoke>, ServiceInvoke>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasServiceInvoked links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> GetLinksToServiceInvoked ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ServiceInvoke link accessor
		/// <summary>
		/// Get the MobileAppModelHasServiceInvoked link to a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceInvoked GetLinkToMobileAppModel (global::Company.MobileDSL.ServiceInvoke serviceInvokeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(serviceInvokeInstance, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceInvoke not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasServiceInvoked instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasServiceInvoked links between a given MobileAppModel and a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceInvoke target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(source, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceInvoked link in links )
			{
				if ( target.Equals(link.ServiceInvoke) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasServiceInvoked link between a given MobileAppModeland a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceInvoked GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceInvoke target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(source, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceInvoked link in links )
			{
				if ( target.Equals(link.ServiceInvoke) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasServiceMsg
	/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6d7c61f5-6e65-444e-acec-c9cf27106efb")]
	public partial class MobileAppModelHasServiceMsg : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasServiceMsg domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d7c61f5, 0x6e65, 0x444e, 0xac, 0xec, 0xc9, 0xcf, 0x27, 0x10, 0x6e, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasServiceMsg link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ServiceMsg to use as the target of the relationship.</param>
		public MobileAppModelHasServiceMsg(MobileAppModel source, ServiceMsg target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xc93f33ef, 0xeffe, 0x4817, 0xa9, 0xfb, 0xce, 0xd8, 0xe5, 0xf2, 0x9e, 0x27);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceMsg", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c93f33ef-effe-4817-a9fb-ced8e5f29e27")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ServiceMsg
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ServiceMsg element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceMsgDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ServiceMsg element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceMsgDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ServiceMsg domain role code
		
		/// <summary>
		/// ServiceMsg domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceMsgDomainRoleId = new global::System.Guid(0x911b8a94, 0xa1be, 0x42c5, 0xb9, 0xab, 0x1e, 0x69, 0xcb, 0x48, 0x4a, 0x83);
		
		/// <summary>
		/// DomainRole ServiceMsg
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsg
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("911b8a94-a1be-42c5-b9ab-1e69cb484a83")]
		public virtual ServiceMsg ServiceMsg
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceMsg)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceMsgDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceMsgDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceMsg of a MobileAppModel
		/// <summary>
		/// Gets a list of ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceMsg> GetServiceMsg(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceMsg>, ServiceMsg>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasServiceMsg links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceMsg> GetLinksToServiceMsg ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ServiceMsg link accessor
		/// <summary>
		/// Get the MobileAppModelHasServiceMsg link to a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceMsg GetLinkToMobileAppModel (global::Company.MobileDSL.ServiceMsg serviceMsgInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(serviceMsgInstance, global::Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceMsg not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasServiceMsg instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasServiceMsg links between a given MobileAppModel and a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceMsg> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceMsg target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceMsg> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceMsg>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(source, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceMsg link in links )
			{
				if ( target.Equals(link.ServiceMsg) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasServiceMsg link between a given MobileAppModeland a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceMsg GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceMsg target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(source, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceMsg link in links )
			{
				if ( target.Equals(link.ServiceMsg) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasAppCoded
	/// Description for Company.MobileDSL.MobileAppModelHasAppCoded
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("34b0437a-d93e-49e9-acf0-6684d68ebdcb")]
	public partial class MobileAppModelHasAppCoded : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasAppCoded domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34b0437a, 0xd93e, 0x49e9, 0xac, 0xf0, 0x66, 0x84, 0xd6, 0x8e, 0xbd, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasAppCoded link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">AppCode to use as the target of the relationship.</param>
		public MobileAppModelHasAppCoded(MobileAppModel source, AppCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasAppCoded.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasAppCoded.AppCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasAppCoded(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasAppCoded(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasAppCoded(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasAppCoded(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x457c82fa, 0xd6b1, 0x4fc9, 0xb7, 0x51, 0x83, 0xc4, 0x8c, 0xb3, 0x53, 0x1e);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AppCoded", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("457c82fa-d6b1-4fc9-b751-83c48cb3531e")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a AppCode
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(AppCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AppCodeDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(AppCode element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AppCodeDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region AppCode domain role code
		
		/// <summary>
		/// AppCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AppCodeDomainRoleId = new global::System.Guid(0xffb7c7a9, 0x0585, 0x44fa, 0x90, 0x27, 0x7c, 0xfd, 0x4c, 0x36, 0xb2, 0x92);
		
		/// <summary>
		/// DomainRole AppCode
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.AppCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ffb7c7a9-0585-44fa-9027-7cfd4c36b292")]
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AppCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AppCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AppCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AppCoded of a MobileAppModel
		/// <summary>
		/// Gets a list of AppCoded.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AppCode> GetAppCoded(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AppCode>, AppCode>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasAppCoded links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasAppCoded> GetLinksToAppCoded ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
		}
		#endregion
		#region AppCode link accessor
		/// <summary>
		/// Get the MobileAppModelHasAppCoded link to a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasAppCoded GetLinkToMobileAppModel (global::Company.MobileDSL.AppCode appCodeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(appCodeInstance, global::Company.MobileDSL.MobileAppModelHasAppCoded.AppCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AppCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasAppCoded instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasAppCoded links between a given MobileAppModel and a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasAppCoded> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasAppCoded> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasAppCoded>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(source, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasAppCoded link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasAppCoded link between a given MobileAppModeland a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasAppCoded GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(source, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasAppCoded link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateReferencesShowForm
	/// Description for Company.MobileDSL.StateReferencesShowForm
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("cadc549c-bf39-43b1-a459-1fda3a3d1cb8")]
	public partial class StateReferencesShowForm : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateReferencesShowForm domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcadc549c, 0xbf39, 0x43b1, 0xa4, 0x59, 0x1f, 0xda, 0x3a, 0x3d, 0x1c, 0xb8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateReferencesShowForm link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">ShowForm to use as the target of the relationship.</param>
		public StateReferencesShowForm(State source, ShowForm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateReferencesShowForm.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateReferencesShowForm.ShowFormDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesShowForm(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesShowForm(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesShowForm(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesShowForm(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x06af6308, 0x3725, 0x42e3, 0xb5, 0x65, 0xc2, 0xc8, 0x0d, 0x7a, 0x1b, 0x05);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateReferencesShowForm.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesShowForm/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesShowForm/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShowForm", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesShowForm/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("06af6308-3725-42e3-b565-c2c80d7a1b05")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Stated of a ShowForm
		/// <summary>
		/// Gets a list of Stated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStated(ShowForm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, ShowFormDomainRoleId);
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0xae9637a7, 0x287e, 0x4728, 0x83, 0xab, 0x07, 0x40, 0x16, 0xe9, 0x31, 0xbd);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.StateReferencesShowForm.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesShowForm/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesShowForm/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Stated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesShowForm/ShowForm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae9637a7-287e-4728-83ab-074016e931bd")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForm of a State
		/// <summary>
		/// Gets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShowForm GetShowForm(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as ShowForm;
		}
		
		/// <summary>
		/// Sets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShowForm(State element, ShowForm newShowForm)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newShowForm);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the StateReferencesShowForm link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesShowForm GetLinkToShowForm (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesShowForm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesShowForm>(stateInstance, global::Company.MobileDSL.StateReferencesShowForm.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the list of StateReferencesShowForm links to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesShowForm> GetLinksToStated ( global::Company.MobileDSL.ShowForm showFormInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesShowForm>(showFormInstance, global::Company.MobileDSL.StateReferencesShowForm.ShowFormDomainRoleId);
		}
		#endregion
		#region StateReferencesShowForm instance accessors
		
		/// <summary>
		/// Get any StateReferencesShowForm links between a given State and a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesShowForm> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesShowForm> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesShowForm>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesShowForm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesShowForm>(source, global::Company.MobileDSL.StateReferencesShowForm.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesShowForm link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateReferencesShowForm link between a given Stateand a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesShowForm GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesShowForm> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesShowForm>(source, global::Company.MobileDSL.StateReferencesShowForm.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesShowForm link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerReferencesStates
	/// Description for Company.MobileDSL.ControllerReferencesStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerReferencesStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerReferencesStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7610ecef-5792-4a97-a39e-2131d9587049")]
	public partial class ControllerReferencesStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerReferencesStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7610ecef, 0x5792, 0x4a97, 0xa3, 0x9e, 0x21, 0x31, 0xd9, 0x58, 0x70, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerReferencesStates link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public ControllerReferencesStates(Controller source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerReferencesStates.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerReferencesStates.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerReferencesStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerReferencesStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerReferencesStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerReferencesStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x2006ecac, 0x96f4, 0x4fbf, 0x81, 0x5e, 0xa7, 0x97, 0x0e, 0x88, 0xca, 0x98);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.ControllerReferencesStates.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerReferencesStates/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerReferencesStates/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "States", PropertyDisplayNameKey="Company.MobileDSL.ControllerReferencesStates/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2006ecac-96f4-4fbf-815e-a7970e88ca98")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a State
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(State element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newController);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0x239a411c, 0xf08b, 0x4b78, 0xa0, 0x01, 0xb7, 0xb8, 0xd9, 0x83, 0x5e, 0x7b);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.ControllerReferencesStates.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerReferencesStates/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerReferencesStates/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerReferencesStates/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("239a411c-f08b-4b78-a001-b7b8d9835e7b")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access States of a Controller
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStates(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerReferencesStates links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerReferencesStates> GetLinksToStates ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerReferencesStates>(controllerInstance, global::Company.MobileDSL.ControllerReferencesStates.ControllerDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the ControllerReferencesStates link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerReferencesStates GetLinkToController (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerReferencesStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerReferencesStates>(stateInstance, global::Company.MobileDSL.ControllerReferencesStates.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerReferencesStates instance accessors
		
		/// <summary>
		/// Get any ControllerReferencesStates links between a given Controller and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerReferencesStates> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerReferencesStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerReferencesStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerReferencesStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerReferencesStates>(source, global::Company.MobileDSL.ControllerReferencesStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerReferencesStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerReferencesStates link between a given Controllerand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerReferencesStates GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerReferencesStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerReferencesStates>(source, global::Company.MobileDSL.ControllerReferencesStates.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerReferencesStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ControllerHasPorts
	/// Description for Company.MobileDSL.ControllerHasPorts
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("234286bb-0e2e-4824-964d-3a6ad7e3d350")]
	public partial class ControllerHasPorts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ControllerHasPorts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x234286bb, 0x0e2e, 0x4824, 0x96, 0x4d, 0x3a, 0x6a, 0xd7, 0xe3, 0xd3, 0x50);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ControllerHasPorts link in the same Partition as the given Controller
		/// </summary>
		/// <param name="source">Controller to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public ControllerHasPorts(Controller source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ControllerHasPorts.ControllerDomainRoleId, source), new DslModeling::RoleAssignment(ControllerHasPorts.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasPorts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasPorts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ControllerHasPorts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ControllerHasPorts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0x8837cf4a, 0x2add, 0x4464, 0xa8, 0x0e, 0x50, 0x91, 0x20, 0x3c, 0x6a, 0x02);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.ControllerHasPorts.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Ports", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasPorts/Controller.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8837cf4a-2add-4464-a80e-5091203c6a02")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controller of a Port
		/// <summary>
		/// Gets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Controller GetController(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as Controller;
		}
		
		/// <summary>
		/// Sets Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetController(Port element, Controller newController)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newController);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x6af383b1, 0x6144, 0x4cd0, 0xad, 0x2f, 0xc2, 0x47, 0xcc, 0x10, 0xc9, 0x8c);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.ControllerHasPorts.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ControllerHasPorts/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ControllerHasPorts/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Controller", PropertyDisplayNameKey="Company.MobileDSL.ControllerHasPorts/Port.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6af383b1-6144-4cd0-ad2f-c247cc10c98c")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Ports of a Controller
		/// <summary>
		/// Gets a list of Ports.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Port> GetPorts(Controller element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Port>, Port>(element, ControllerDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the list of ControllerHasPorts links to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasPorts> GetLinksToPorts ( global::Company.MobileDSL.Controller controllerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(controllerInstance, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the ControllerHasPorts link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasPorts GetLinkToController (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(portInstance, global::Company.MobileDSL.ControllerHasPorts.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ControllerHasPorts instance accessors
		
		/// <summary>
		/// Get any ControllerHasPorts links between a given Controller and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ControllerHasPorts> GetLinks( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasPorts> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ControllerHasPorts>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(source, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ControllerHasPorts link between a given Controllerand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ControllerHasPorts GetLink( global::Company.MobileDSL.Controller source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ControllerHasPorts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ControllerHasPorts>(source, global::Company.MobileDSL.ControllerHasPorts.ControllerDomainRoleId);
			foreach ( global::Company.MobileDSL.ControllerHasPorts link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship PortReferencesTargetPort
	/// Description for Company.MobileDSL.PortReferencesTargetPort
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesTargetPort.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesTargetPort.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b8742a85-64e2-4041-ba3e-1d71da4e74a0")]
	public partial class PortReferencesTargetPort : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PortReferencesTargetPort domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb8742a85, 0x64e2, 0x4041, 0xba, 0x3e, 0x1d, 0x71, 0xda, 0x4e, 0x74, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PortReferencesTargetPort link in the same Partition as the given Port
		/// </summary>
		/// <param name="source">Port to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public PortReferencesTargetPort(Port source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PortReferencesTargetPort.SourcePortDomainRoleId, source), new DslModeling::RoleAssignment(PortReferencesTargetPort.TargetPortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesTargetPort(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesTargetPort(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesTargetPort(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesTargetPort(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourcePort domain role code
		
		/// <summary>
		/// SourcePort domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourcePortDomainRoleId = new global::System.Guid(0xecc952df, 0x7cb1, 0x4b2a, 0x8f, 0x70, 0xb1, 0xa5, 0x1d, 0x86, 0x6a, 0x06);
		
		/// <summary>
		/// DomainRole SourcePort
		/// Description for Company.MobileDSL.PortReferencesTargetPort.SourcePort
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesTargetPort/SourcePort.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesTargetPort/SourcePort.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetPort", PropertyDisplayNameKey="Company.MobileDSL.PortReferencesTargetPort/SourcePort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("ecc952df-7cb1-4b2a-8f70-b1a51d866a06")]
		public virtual Port SourcePort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourcePortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourcePortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePort of a Port
		/// <summary>
		/// Gets SourcePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Port GetSourcePort(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetPortDomainRoleId) as Port;
		}
		
		/// <summary>
		/// Sets SourcePort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSourcePort(Port element, Port newSourcePort)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetPortDomainRoleId, newSourcePort);
		}
		#endregion
		#region TargetPort domain role code
		
		/// <summary>
		/// TargetPort domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetPortDomainRoleId = new global::System.Guid(0x6c4b9795, 0xe8da, 0x40c4, 0xac, 0xfb, 0x43, 0xfc, 0xb1, 0x7a, 0xed, 0x47);
		
		/// <summary>
		/// DomainRole TargetPort
		/// Description for Company.MobileDSL.PortReferencesTargetPort.TargetPort
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesTargetPort/TargetPort.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesTargetPort/TargetPort.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourcePort", PropertyDisplayNameKey="Company.MobileDSL.PortReferencesTargetPort/TargetPort.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6c4b9795-e8da-40c4-acfb-43fcb17aed47")]
		public virtual Port TargetPort
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetPortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetPortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetPort of a Port
		/// <summary>
		/// Gets TargetPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Port GetTargetPort(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourcePortDomainRoleId) as Port;
		}
		
		/// <summary>
		/// Sets TargetPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTargetPort(Port element, Port newTargetPort)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourcePortDomainRoleId, newTargetPort);
		}
		#endregion
		#region SourcePort link accessor
		/// <summary>
		/// Get the PortReferencesTargetPort link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesTargetPort GetLinkToTargetPort (global::Company.MobileDSL.Port sourcePortInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesTargetPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesTargetPort>(sourcePortInstance, global::Company.MobileDSL.PortReferencesTargetPort.SourcePortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourcePort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetPort link accessor
		/// <summary>
		/// Get the PortReferencesTargetPort link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesTargetPort GetLinkToSourcePort (global::Company.MobileDSL.Port targetPortInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesTargetPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesTargetPort>(targetPortInstance, global::Company.MobileDSL.PortReferencesTargetPort.TargetPortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetPort not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PortReferencesTargetPort instance accessors
		
		/// <summary>
		/// Get any PortReferencesTargetPort links between a given Port and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.PortReferencesTargetPort> GetLinks( global::Company.MobileDSL.Port source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.PortReferencesTargetPort> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.PortReferencesTargetPort>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesTargetPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesTargetPort>(source, global::Company.MobileDSL.PortReferencesTargetPort.SourcePortDomainRoleId);
			foreach ( global::Company.MobileDSL.PortReferencesTargetPort link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PortReferencesTargetPort link between a given Portand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesTargetPort GetLink( global::Company.MobileDSL.Port source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesTargetPort> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesTargetPort>(source, global::Company.MobileDSL.PortReferencesTargetPort.SourcePortDomainRoleId);
			foreach ( global::Company.MobileDSL.PortReferencesTargetPort link in links )
			{
				if ( target.Equals(link.TargetPort) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship PortReferencesState
	/// Description for Company.MobileDSL.PortReferencesState
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("341fb89c-6ebc-42f4-bd77-88f36aba6d57")]
	public partial class PortReferencesState : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PortReferencesState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x341fb89c, 0x6ebc, 0x42f4, 0xbd, 0x77, 0x88, 0xf3, 0x6a, 0xba, 0x6d, 0x57);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PortReferencesState link in the same Partition as the given Port
		/// </summary>
		/// <param name="source">Port to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public PortReferencesState(Port source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PortReferencesState.PortDomainRoleId, source), new DslModeling::RoleAssignment(PortReferencesState.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesState(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesState(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PortReferencesState(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PortReferencesState(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x4bece731, 0xd78a, 0x457a, 0x85, 0xce, 0x30, 0xba, 0xd8, 0x93, 0xe6, 0x9c);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.PortReferencesState.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesState/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesState/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "State", PropertyDisplayNameKey="Company.MobileDSL.PortReferencesState/Port.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4bece731-d78a-457a-85ce-30bad893e69c")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Port of a State
		/// <summary>
		/// Gets Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Port GetPort(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as Port;
		}
		
		/// <summary>
		/// Sets Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPort(State element, Port newPort)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newPort);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xa7b6cfc4, 0x57c8, 0x408e, 0xae, 0xd5, 0x80, 0x49, 0x10, 0xcf, 0xdb, 0xaa);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.PortReferencesState.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.PortReferencesState/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.PortReferencesState/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Port", PropertyDisplayNameKey="Company.MobileDSL.PortReferencesState/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a7b6cfc4-57c8-408e-aed5-804910cfdbaa")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access State of a Port
		/// <summary>
		/// Gets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetState(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetState(Port element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newState);
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the PortReferencesState link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesState GetLinkToState (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesState>(portInstance, global::Company.MobileDSL.PortReferencesState.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the PortReferencesState link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesState GetLinkToPort (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesState>(stateInstance, global::Company.MobileDSL.PortReferencesState.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PortReferencesState instance accessors
		
		/// <summary>
		/// Get any PortReferencesState links between a given Port and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.PortReferencesState> GetLinks( global::Company.MobileDSL.Port source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.PortReferencesState> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.PortReferencesState>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesState>(source, global::Company.MobileDSL.PortReferencesState.PortDomainRoleId);
			foreach ( global::Company.MobileDSL.PortReferencesState link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PortReferencesState link between a given Portand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.PortReferencesState GetLink( global::Company.MobileDSL.Port source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.PortReferencesState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.PortReferencesState>(source, global::Company.MobileDSL.PortReferencesState.PortDomainRoleId);
			foreach ( global::Company.MobileDSL.PortReferencesState link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateReferencesPortFromState
	/// Description for Company.MobileDSL.StateReferencesPortFromState
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPortFromState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPortFromState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0da13d50-478a-4ec4-bd7a-a337f06056b7")]
	public partial class StateReferencesPortFromState : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateReferencesPortFromState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0da13d50, 0x478a, 0x4ec4, 0xbd, 0x7a, 0xa3, 0x37, 0xf0, 0x60, 0x56, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateReferencesPortFromState link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">Port to use as the target of the relationship.</param>
		public StateReferencesPortFromState(State source, Port target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateReferencesPortFromState.StateDomainRoleId, source), new DslModeling::RoleAssignment(StateReferencesPortFromState.PortDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesPortFromState(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesPortFromState(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesPortFromState(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesPortFromState(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xcdf83361, 0x8c2c, 0x468e, 0xb7, 0x3c, 0x42, 0xe2, 0x93, 0x75, 0xb3, 0x68);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.StateReferencesPortFromState.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPortFromState/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPortFromState/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PortFromState", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesPortFromState/State.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cdf83361-8c2c-468e-b73c-42e29375b368")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access StateFromPort of a Port
		/// <summary>
		/// Gets StateFromPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static State GetStateFromPort(Port element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PortDomainRoleId) as State;
		}
		
		/// <summary>
		/// Sets StateFromPort.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetStateFromPort(Port element, State newState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PortDomainRoleId, newState);
		}
		#endregion
		#region Port domain role code
		
		/// <summary>
		/// Port domain role Id.
		/// </summary>
		public static readonly global::System.Guid PortDomainRoleId = new global::System.Guid(0x2e93f0ee, 0xc9b7, 0x4a81, 0x8a, 0xc4, 0xe8, 0xfa, 0x6d, 0x06, 0x47, 0xca);
		
		/// <summary>
		/// DomainRole Port
		/// Description for Company.MobileDSL.StateReferencesPortFromState.Port
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesPortFromState/Port.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesPortFromState/Port.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "StateFromPort", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesPortFromState/Port.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2e93f0ee-c9b7-4a81-8ac4-e8fa6d0647ca")]
		public virtual Port Port
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Port)DslModeling::DomainRoleInfo.GetRolePlayer(this, PortDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PortDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PortFromState of a State
		/// <summary>
		/// Gets PortFromState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Port GetPortFromState(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as Port;
		}
		
		/// <summary>
		/// Sets PortFromState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPortFromState(State element, Port newPort)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newPort);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the StateReferencesPortFromState link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesPortFromState GetLinkToPortFromState (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPortFromState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPortFromState>(stateInstance, global::Company.MobileDSL.StateReferencesPortFromState.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Port link accessor
		/// <summary>
		/// Get the StateReferencesPortFromState link to a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesPortFromState GetLinkToStateFromPort (global::Company.MobileDSL.Port portInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPortFromState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPortFromState>(portInstance, global::Company.MobileDSL.StateReferencesPortFromState.PortDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Port not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region StateReferencesPortFromState instance accessors
		
		/// <summary>
		/// Get any StateReferencesPortFromState links between a given State and a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesPortFromState> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesPortFromState> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesPortFromState>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPortFromState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPortFromState>(source, global::Company.MobileDSL.StateReferencesPortFromState.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesPortFromState link in links )
			{
				if ( target.Equals(link.Port) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateReferencesPortFromState link between a given Stateand a Port.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesPortFromState GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.Port target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesPortFromState> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesPortFromState>(source, global::Company.MobileDSL.StateReferencesPortFromState.StateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesPortFromState link in links )
			{
				if ( target.Equals(link.Port) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship StateReferencesTargetStated
	/// Description for Company.MobileDSL.StateReferencesTargetStated
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("042689d1-0588-40b4-b76a-303fe21960d3")]
	public partial class StateReferencesTargetStated : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StateReferencesTargetStated domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x042689d1, 0x0588, 0x40b4, 0xb7, 0x6a, 0x30, 0x3f, 0xe2, 0x19, 0x60, 0xd3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StateReferencesTargetStated link in the same Partition as the given State
		/// </summary>
		/// <param name="source">State to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public StateReferencesTargetStated(State source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StateReferencesTargetStated.SourceStateDomainRoleId, source), new DslModeling::RoleAssignment(StateReferencesTargetStated.TargetStateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesTargetStated(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesTargetStated(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StateReferencesTargetStated(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StateReferencesTargetStated(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceState domain role code
		
		/// <summary>
		/// SourceState domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceStateDomainRoleId = new global::System.Guid(0xe646194b, 0xeedb, 0x498c, 0xb6, 0x8a, 0x0b, 0x10, 0x89, 0xe2, 0xd7, 0x7a);
		
		/// <summary>
		/// DomainRole SourceState
		/// Description for Company.MobileDSL.StateReferencesTargetStated.SourceState
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated/SourceState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated/SourceState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetStated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesTargetStated/SourceState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e646194b-eedb-498c-b68a-0b1089e2d77a")]
		public virtual State SourceState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceStated of a State
		/// <summary>
		/// Gets a list of SourceStated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetSourceStated(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, TargetStateDomainRoleId);
		}
		#endregion
		#region TargetState domain role code
		
		/// <summary>
		/// TargetState domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetStateDomainRoleId = new global::System.Guid(0x3995af86, 0xcad2, 0x4f2c, 0x8c, 0x2f, 0x23, 0xe0, 0x6c, 0x6f, 0x6d, 0x10);
		
		/// <summary>
		/// DomainRole TargetState
		/// Description for Company.MobileDSL.StateReferencesTargetStated.TargetState
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.StateReferencesTargetStated/TargetState.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.StateReferencesTargetStated/TargetState.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceStated", PropertyDisplayNameKey="Company.MobileDSL.StateReferencesTargetStated/TargetState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3995af86-cad2-4f2c-8c2f-23e06c6f6d10")]
		public virtual State TargetState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetStated of a State
		/// <summary>
		/// Gets a list of TargetStated.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetTargetStated(State element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, SourceStateDomainRoleId);
		}
		#endregion
		#region SourceState link accessor
		/// <summary>
		/// Get the list of StateReferencesTargetStated links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinksToTargetStated ( global::Company.MobileDSL.State sourceStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(sourceStateInstance, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
		}
		#endregion
		#region TargetState link accessor
		/// <summary>
		/// Get the list of StateReferencesTargetStated links to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinksToSourceStated ( global::Company.MobileDSL.State targetStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(targetStateInstance, global::Company.MobileDSL.StateReferencesTargetStated.TargetStateDomainRoleId);
		}
		#endregion
		#region StateReferencesTargetStated instance accessors
		
		/// <summary>
		/// Get any StateReferencesTargetStated links between a given State and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.StateReferencesTargetStated> GetLinks( global::Company.MobileDSL.State source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesTargetStated> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.StateReferencesTargetStated>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesTargetStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(source, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesTargetStated link in links )
			{
				if ( target.Equals(link.TargetState) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StateReferencesTargetStated link between a given Stateand a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.StateReferencesTargetStated GetLink( global::Company.MobileDSL.State source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.StateReferencesTargetStated> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.StateReferencesTargetStated>(source, global::Company.MobileDSL.StateReferencesTargetStated.SourceStateDomainRoleId);
			foreach ( global::Company.MobileDSL.StateReferencesTargetStated link in links )
			{
				if ( target.Equals(link.TargetState) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ButtonReferencesAppCode
	/// Description for Company.MobileDSL.ButtonReferencesAppCode
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ButtonReferencesAppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ButtonReferencesAppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("083086db-6e46-475e-b966-2a9d7918788a")]
	public partial class ButtonReferencesAppCode : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ButtonReferencesAppCode domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x083086db, 0x6e46, 0x475e, 0xb9, 0x66, 0x2a, 0x9d, 0x79, 0x18, 0x78, 0x8a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ButtonReferencesAppCode link in the same Partition as the given Button
		/// </summary>
		/// <param name="source">Button to use as the source of the relationship.</param>
		/// <param name="target">AppCode to use as the target of the relationship.</param>
		public ButtonReferencesAppCode(Button source, AppCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ButtonReferencesAppCode.ButtonDomainRoleId, source), new DslModeling::RoleAssignment(ButtonReferencesAppCode.AppCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ButtonReferencesAppCode(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ButtonReferencesAppCode(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ButtonReferencesAppCode(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ButtonReferencesAppCode(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Button domain role code
		
		/// <summary>
		/// Button domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonDomainRoleId = new global::System.Guid(0xb56a3ec4, 0xeba7, 0x4d89, 0x9c, 0xe6, 0x72, 0x6c, 0xc0, 0x3d, 0xf1, 0xa9);
		
		/// <summary>
		/// DomainRole Button
		/// Description for Company.MobileDSL.ButtonReferencesAppCode.Button
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ButtonReferencesAppCode/Button.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ButtonReferencesAppCode/Button.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AppCode", PropertyDisplayNameKey="Company.MobileDSL.ButtonReferencesAppCode/Button.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b56a3ec4-eba7-4d89-9ce6-726cc03df1a9")]
		public virtual Button Button
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Button)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Buttoned of a AppCode
		/// <summary>
		/// Gets a list of Buttoned.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Button> GetButtoned(AppCode element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(element, AppCodeDomainRoleId);
		}
		#endregion
		#region AppCode domain role code
		
		/// <summary>
		/// AppCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AppCodeDomainRoleId = new global::System.Guid(0xe2c2029a, 0xc4fb, 0x42d3, 0x8a, 0x00, 0x58, 0x85, 0xb9, 0x89, 0x65, 0x36);
		
		/// <summary>
		/// DomainRole AppCode
		/// Description for Company.MobileDSL.ButtonReferencesAppCode.AppCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ButtonReferencesAppCode/AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ButtonReferencesAppCode/AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Buttoned", PropertyDisplayNameKey="Company.MobileDSL.ButtonReferencesAppCode/AppCode.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e2c2029a-c4fb-42d3-8a00-5885b9896536")]
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AppCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AppCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AppCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AppCode of a Button
		/// <summary>
		/// Gets AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AppCode GetAppCode(Button element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonDomainRoleId) as AppCode;
		}
		
		/// <summary>
		/// Sets AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAppCode(Button element, AppCode newAppCode)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonDomainRoleId, newAppCode);
		}
		#endregion
		#region Button link accessor
		/// <summary>
		/// Get the ButtonReferencesAppCode link to a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ButtonReferencesAppCode GetLinkToAppCode (global::Company.MobileDSL.Button buttonInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ButtonReferencesAppCode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ButtonReferencesAppCode>(buttonInstance, global::Company.MobileDSL.ButtonReferencesAppCode.ButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Button not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AppCode link accessor
		/// <summary>
		/// Get the list of ButtonReferencesAppCode links to a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ButtonReferencesAppCode> GetLinksToButtoned ( global::Company.MobileDSL.AppCode appCodeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ButtonReferencesAppCode>(appCodeInstance, global::Company.MobileDSL.ButtonReferencesAppCode.AppCodeDomainRoleId);
		}
		#endregion
		#region ButtonReferencesAppCode instance accessors
		
		/// <summary>
		/// Get any ButtonReferencesAppCode links between a given Button and a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ButtonReferencesAppCode> GetLinks( global::Company.MobileDSL.Button source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ButtonReferencesAppCode> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ButtonReferencesAppCode>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ButtonReferencesAppCode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ButtonReferencesAppCode>(source, global::Company.MobileDSL.ButtonReferencesAppCode.ButtonDomainRoleId);
			foreach ( global::Company.MobileDSL.ButtonReferencesAppCode link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ButtonReferencesAppCode link between a given Buttonand a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ButtonReferencesAppCode GetLink( global::Company.MobileDSL.Button source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ButtonReferencesAppCode> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ButtonReferencesAppCode>(source, global::Company.MobileDSL.ButtonReferencesAppCode.ButtonDomainRoleId);
			foreach ( global::Company.MobileDSL.ButtonReferencesAppCode link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
