//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasElements.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasElements.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1e8b579c-469a-42c2-9544-2767371c0e6d")]
	public partial class MobileAppModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e8b579c, 0x469a, 0x42c2, 0x95, 0x44, 0x27, 0x67, 0x37, 0x1c, 0x0e, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasElements link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ExampleElement to use as the target of the relationship.</param>
		public MobileAppModelHasElements(MobileAppModel source, ExampleElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasElements.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xe6c4156f, 0x1227, 0x4494, 0xa0, 0x61, 0xb7, 0xd4, 0xb2, 0x3c, 0x3f, 0x7b);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasElements/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasElements/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasElements/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e6c4156f-1227-4494-a061-b7d4b23c3f7b")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ExampleElement
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ExampleElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ExampleElement element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x1fab62c9, 0x87ec, 0x4c8f, 0x86, 0xc6, 0x78, 0xca, 0xb9, 0x85, 0xf4, 0x07);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasElements/Element.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasElements/Element.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1fab62c9-87ec-4c8f-86c6-78cab985f407")]
		public virtual ExampleElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a MobileAppModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetElements(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasElements links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasElements> GetLinksToElements ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasElements>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasElements.MobileAppModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the MobileAppModelHasElements link to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasElements GetLinkToMobileAppModel (global::Company.MobileDSL.ExampleElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasElements>(elementInstance, global::Company.MobileDSL.MobileAppModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasElements instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasElements links between a given MobileAppModel and a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasElements> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ExampleElement target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasElements>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasElements>(source, global::Company.MobileDSL.MobileAppModelHasElements.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasElements link between a given MobileAppModeland a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasElements GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ExampleElement target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasElements>(source, global::Company.MobileDSL.MobileAppModelHasElements.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ExampleElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ExampleElementReferencesTargets.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ExampleElementReferencesTargets.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f9e3a406-a3af-4230-97e1-4a697785b1ea")]
	public partial class ExampleElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf9e3a406, 0xa3af, 0x4230, 0x97, 0xe1, 0x4a, 0x69, 0x77, 0x85, 0xb1, 0xea);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleElementReferencesTargets link in the same Partition as the given ExampleElement
		/// </summary>
		/// <param name="source">ExampleElement to use as the source of the relationship.</param>
		/// <param name="target">ExampleElement to use as the target of the relationship.</param>
		public ExampleElementReferencesTargets(ExampleElement source, ExampleElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ExampleElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x7d67102a, 0x74d2, 0x4122, 0x80, 0x4c, 0x7e, 0xad, 0xf9, 0xec, 0xce, 0xcf);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.MobileDSL.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ExampleElementReferencesTargets/Source.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ExampleElementReferencesTargets/Source.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Company.MobileDSL.ExampleElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7d67102a-74d2-4122-804c-7eadf9eccecf")]
		public virtual ExampleElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ExampleElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetSources(ExampleElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x2d900298, 0xfbf7, 0x47a1, 0xa1, 0x91, 0xf2, 0x96, 0x2d, 0x20, 0x51, 0x72);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.MobileDSL.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ExampleElementReferencesTargets/Target.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ExampleElementReferencesTargets/Target.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Company.MobileDSL.ExampleElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2d900298-fbf7-47a1-a191-f2962d205172")]
		public virtual ExampleElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a ExampleElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetTargets(ExampleElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ExampleElementReferencesTargets links to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ExampleElementReferencesTargets> GetLinksToTargets ( global::Company.MobileDSL.ExampleElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ExampleElementReferencesTargets>(sourceInstance, global::Company.MobileDSL.ExampleElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ExampleElementReferencesTargets links to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ExampleElementReferencesTargets> GetLinksToSources ( global::Company.MobileDSL.ExampleElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ExampleElementReferencesTargets>(targetInstance, global::Company.MobileDSL.ExampleElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region ExampleElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any ExampleElementReferencesTargets links between a given ExampleElement and a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ExampleElementReferencesTargets> GetLinks( global::Company.MobileDSL.ExampleElement source, global::Company.MobileDSL.ExampleElement target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ExampleElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ExampleElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ExampleElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ExampleElementReferencesTargets>(source, global::Company.MobileDSL.ExampleElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.ExampleElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleElementReferencesTargets link between a given ExampleElementand a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ExampleElementReferencesTargets GetLink( global::Company.MobileDSL.ExampleElement source, global::Company.MobileDSL.ExampleElement target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ExampleElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ExampleElementReferencesTargets>(source, global::Company.MobileDSL.ExampleElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Company.MobileDSL.ExampleElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasControllers
	/// Description for Company.MobileDSL.MobileAppModelHasControllers
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("78177309-8630-43cd-8e60-f46d23c491b2")]
	public partial class MobileAppModelHasControllers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasControllers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x78177309, 0x8630, 0x43cd, 0x8e, 0x60, 0xf4, 0x6d, 0x23, 0xc4, 0x91, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasControllers link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">Controller to use as the target of the relationship.</param>
		public MobileAppModelHasControllers(MobileAppModel source, Controller target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasControllers.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasControllers.ControllerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasControllers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasControllers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasControllers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasControllers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x80bde2c8, 0xcc01, 0x4ca0, 0xb5, 0x41, 0x17, 0x91, 0xe6, 0x48, 0x48, 0x55);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Controllers", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasControllers/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("80bde2c8-cc01-4ca0-b541-1791e6484855")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a Controller
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(Controller element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ControllerDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(Controller element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ControllerDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region Controller domain role code
		
		/// <summary>
		/// Controller domain role Id.
		/// </summary>
		public static readonly global::System.Guid ControllerDomainRoleId = new global::System.Guid(0xa72e60c4, 0x7d2c, 0x4fa3, 0xaf, 0x21, 0x69, 0x15, 0x61, 0xb7, 0x1a, 0x8a);
		
		/// <summary>
		/// DomainRole Controller
		/// Description for Company.MobileDSL.MobileAppModelHasControllers.Controller
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasControllers/Controller.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasControllers/Controller.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasControllers/Controller.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a72e60c4-7d2c-4fa3-af21-691561b71a8a")]
		public virtual Controller Controller
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Controller)DslModeling::DomainRoleInfo.GetRolePlayer(this, ControllerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ControllerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Controllers of a MobileAppModel
		/// <summary>
		/// Gets a list of Controllers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Controller> GetControllers(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Controller>, Controller>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasControllers links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasControllers> GetLinksToControllers ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
		}
		#endregion
		#region Controller link accessor
		/// <summary>
		/// Get the MobileAppModelHasControllers link to a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasControllers GetLinkToMobileAppModel (global::Company.MobileDSL.Controller controllerInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(controllerInstance, global::Company.MobileDSL.MobileAppModelHasControllers.ControllerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Controller not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasControllers instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasControllers links between a given MobileAppModel and a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasControllers> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasControllers> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasControllers>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(source, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasControllers link between a given MobileAppModeland a Controller.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasControllers GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.Controller target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasControllers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasControllers>(source, global::Company.MobileDSL.MobileAppModelHasControllers.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasControllers link in links )
			{
				if ( target.Equals(link.Controller) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasStates
	/// Description for Company.MobileDSL.MobileAppModelHasStates
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6d5dd34f-f6a8-47a0-89d7-95bedbc7843e")]
	public partial class MobileAppModelHasStates : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasStates domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d5dd34f, 0xf6a8, 0x47a0, 0x89, 0xd7, 0x95, 0xbe, 0xdb, 0xc7, 0x84, 0x3e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasStates link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">State to use as the target of the relationship.</param>
		public MobileAppModelHasStates(MobileAppModel source, State target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasStates.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasStates.StateDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasStates(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasStates(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasStates(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasStates(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x91c45b43, 0x997c, 0x45fc, 0x86, 0x73, 0x52, 0xf2, 0xe4, 0xf0, 0x0e, 0x07);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasStates.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "States", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasStates/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("91c45b43-997c-45fc-8673-52f2e4f00e07")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a State
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(State element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StateDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(State element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StateDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region State domain role code
		
		/// <summary>
		/// State domain role Id.
		/// </summary>
		public static readonly global::System.Guid StateDomainRoleId = new global::System.Guid(0xe5c95eb7, 0xd293, 0x4dc6, 0x85, 0x11, 0x17, 0xc5, 0xea, 0x21, 0xec, 0x99);
		
		/// <summary>
		/// DomainRole State
		/// Description for Company.MobileDSL.MobileAppModelHasStates.State
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasStates/State.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasStates/State.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasStates/State.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e5c95eb7-d293-4dc6-8511-17c5ea21ec99")]
		public virtual State State
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (State)DslModeling::DomainRoleInfo.GetRolePlayer(this, StateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access States of a MobileAppModel
		/// <summary>
		/// Gets a list of States.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<State> GetStates(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<State>, State>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasStates links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasStates> GetLinksToStates ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
		}
		#endregion
		#region State link accessor
		/// <summary>
		/// Get the MobileAppModelHasStates link to a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasStates GetLinkToMobileAppModel (global::Company.MobileDSL.State stateInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(stateInstance, global::Company.MobileDSL.MobileAppModelHasStates.StateDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of State not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasStates instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasStates links between a given MobileAppModel and a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasStates> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasStates> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasStates>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(source, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasStates link between a given MobileAppModeland a State.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasStates GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.State target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasStates> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasStates>(source, global::Company.MobileDSL.MobileAppModelHasStates.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasStates link in links )
			{
				if ( target.Equals(link.State) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasDataLinked
	/// Description for Company.MobileDSL.MobileAppModelHasDataLinked
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("069dab2a-9667-47cc-b78a-9c0883e88115")]
	public partial class MobileAppModelHasDataLinked : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasDataLinked domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x069dab2a, 0x9667, 0x47cc, 0xb7, 0x8a, 0x9c, 0x08, 0x83, 0xe8, 0x81, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasDataLinked link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">DataLink to use as the target of the relationship.</param>
		public MobileAppModelHasDataLinked(MobileAppModel source, DataLink target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasDataLinked.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasDataLinked.DataLinkDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasDataLinked(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasDataLinked(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasDataLinked(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasDataLinked(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x92b10cc4, 0x0a5f, 0x4978, 0x9a, 0xd6, 0xc9, 0xfa, 0x8a, 0x6a, 0x4b, 0x7a);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DataLinked", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasDataLinked/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92b10cc4-0a5f-4978-9ad6-c9fa8a6a4b7a")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a DataLink
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(DataLink element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DataLinkDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(DataLink element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DataLinkDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region DataLink domain role code
		
		/// <summary>
		/// DataLink domain role Id.
		/// </summary>
		public static readonly global::System.Guid DataLinkDomainRoleId = new global::System.Guid(0xdf71abd5, 0x7d2d, 0x402e, 0x8c, 0x26, 0x25, 0x77, 0x40, 0xc2, 0x0d, 0x5f);
		
		/// <summary>
		/// DomainRole DataLink
		/// Description for Company.MobileDSL.MobileAppModelHasDataLinked.DataLink
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasDataLinked/DataLink.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("df71abd5-7d2d-402e-8c26-257740c20d5f")]
		public virtual DataLink DataLink
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DataLink)DslModeling::DomainRoleInfo.GetRolePlayer(this, DataLinkDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DataLinkDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DataLinked of a MobileAppModel
		/// <summary>
		/// Gets a list of DataLinked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<DataLink> GetDataLinked(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DataLink>, DataLink>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasDataLinked links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasDataLinked> GetLinksToDataLinked ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
		}
		#endregion
		#region DataLink link accessor
		/// <summary>
		/// Get the MobileAppModelHasDataLinked link to a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasDataLinked GetLinkToMobileAppModel (global::Company.MobileDSL.DataLink dataLinkInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(dataLinkInstance, global::Company.MobileDSL.MobileAppModelHasDataLinked.DataLinkDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DataLink not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasDataLinked instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasDataLinked links between a given MobileAppModel and a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasDataLinked> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.DataLink target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasDataLinked> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasDataLinked>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(source, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasDataLinked link in links )
			{
				if ( target.Equals(link.DataLink) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasDataLinked link between a given MobileAppModeland a DataLink.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasDataLinked GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.DataLink target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasDataLinked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasDataLinked>(source, global::Company.MobileDSL.MobileAppModelHasDataLinked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasDataLinked link in links )
			{
				if ( target.Equals(link.DataLink) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasShowFormed
	/// Description for Company.MobileDSL.MobileAppModelHasShowFormed
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f4e9584f-aefe-4347-a863-723e50f495b3")]
	public partial class MobileAppModelHasShowFormed : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasShowFormed domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf4e9584f, 0xaefe, 0x4347, 0xa8, 0x63, 0x72, 0x3e, 0x50, 0xf4, 0x95, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasShowFormed link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ShowForm to use as the target of the relationship.</param>
		public MobileAppModelHasShowFormed(MobileAppModel source, ShowForm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasShowFormed.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasShowFormed.ShowFormDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasShowFormed(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasShowFormed(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasShowFormed(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasShowFormed(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xa5e7173b, 0x24d7, 0x40c0, 0xb3, 0x33, 0x1a, 0x75, 0xaa, 0x25, 0x78, 0xbe);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ShowFormed", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasShowFormed/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a5e7173b-24d7-40c0-b333-1a75aa2578be")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ShowForm
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ShowForm element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ShowFormDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ShowForm element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ShowFormDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0x4c62b89f, 0xb555, 0x4ece, 0xb3, 0x90, 0xb7, 0x44, 0x1b, 0x9f, 0xa0, 0x69);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.MobileAppModelHasShowFormed.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasShowFormed/ShowForm.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c62b89f-b555-4ece-b390-b7441b9fa069")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowFormed of a MobileAppModel
		/// <summary>
		/// Gets a list of ShowFormed.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ShowForm> GetShowFormed(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ShowForm>, ShowForm>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasShowFormed links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasShowFormed> GetLinksToShowFormed ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the MobileAppModelHasShowFormed link to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasShowFormed GetLinkToMobileAppModel (global::Company.MobileDSL.ShowForm showFormInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(showFormInstance, global::Company.MobileDSL.MobileAppModelHasShowFormed.ShowFormDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ShowForm not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasShowFormed instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasShowFormed links between a given MobileAppModel and a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasShowFormed> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasShowFormed> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasShowFormed>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(source, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasShowFormed link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasShowFormed link between a given MobileAppModeland a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasShowFormed GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ShowForm target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasShowFormed> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasShowFormed>(source, global::Company.MobileDSL.MobileAppModelHasShowFormed.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasShowFormed link in links )
			{
				if ( target.Equals(link.ShowForm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship ShowFormHasGraphicElements
	/// Description for Company.MobileDSL.ShowFormHasGraphicElements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c31b3eef-778e-411e-b78d-64b7c7189dbb")]
	public partial class ShowFormHasGraphicElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ShowFormHasGraphicElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc31b3eef, 0x778e, 0x411e, 0xb7, 0x8d, 0x64, 0xb7, 0xc7, 0x18, 0x9d, 0xbb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ShowFormHasGraphicElements link in the same Partition as the given ShowForm
		/// </summary>
		/// <param name="source">ShowForm to use as the source of the relationship.</param>
		/// <param name="target">GraphicElement to use as the target of the relationship.</param>
		public ShowFormHasGraphicElements(ShowForm source, GraphicElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ShowFormHasGraphicElements.ShowFormDomainRoleId, source), new DslModeling::RoleAssignment(ShowFormHasGraphicElements.GraphicElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasGraphicElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasGraphicElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ShowFormHasGraphicElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ShowFormHasGraphicElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ShowForm domain role code
		
		/// <summary>
		/// ShowForm domain role Id.
		/// </summary>
		public static readonly global::System.Guid ShowFormDomainRoleId = new global::System.Guid(0x213247a4, 0x0175, 0x42a9, 0xb8, 0xa7, 0x4d, 0xe7, 0xea, 0xe2, 0x6e, 0x3b);
		
		/// <summary>
		/// DomainRole ShowForm
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.ShowForm
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "GraphicElements", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasGraphicElements/ShowForm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("213247a4-0175-42a9-b8a7-4de7eae26e3b")]
		public virtual ShowForm ShowForm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ShowForm)DslModeling::DomainRoleInfo.GetRolePlayer(this, ShowFormDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ShowFormDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ShowForm of a GraphicElement
		/// <summary>
		/// Gets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ShowForm GetShowForm(GraphicElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, GraphicElementDomainRoleId) as ShowForm;
		}
		
		/// <summary>
		/// Sets ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetShowForm(GraphicElement element, ShowForm newShowForm)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, GraphicElementDomainRoleId, newShowForm);
		}
		#endregion
		#region GraphicElement domain role code
		
		/// <summary>
		/// GraphicElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid GraphicElementDomainRoleId = new global::System.Guid(0xaa171226, 0x245c, 0x452d, 0xb3, 0x00, 0x07, 0xc9, 0x62, 0x48, 0x58, 0x02);
		
		/// <summary>
		/// DomainRole GraphicElement
		/// Description for Company.MobileDSL.ShowFormHasGraphicElements.GraphicElement
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ShowForm", PropertyDisplayNameKey="Company.MobileDSL.ShowFormHasGraphicElements/GraphicElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("aa171226-245c-452d-b300-07c962485802")]
		public virtual GraphicElement GraphicElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (GraphicElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, GraphicElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GraphicElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access GraphicElements of a ShowForm
		/// <summary>
		/// Gets a list of GraphicElements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<GraphicElement> GetGraphicElements(ShowForm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<GraphicElement>, GraphicElement>(element, ShowFormDomainRoleId);
		}
		#endregion
		#region ShowForm link accessor
		/// <summary>
		/// Get the list of ShowFormHasGraphicElements links to a ShowForm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasGraphicElements> GetLinksToGraphicElements ( global::Company.MobileDSL.ShowForm showFormInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(showFormInstance, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
		}
		#endregion
		#region GraphicElement link accessor
		/// <summary>
		/// Get the ShowFormHasGraphicElements link to a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasGraphicElements GetLinkToShowForm (global::Company.MobileDSL.GraphicElement graphicElementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(graphicElementInstance, global::Company.MobileDSL.ShowFormHasGraphicElements.GraphicElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of GraphicElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ShowFormHasGraphicElements instance accessors
		
		/// <summary>
		/// Get any ShowFormHasGraphicElements links between a given ShowForm and a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.ShowFormHasGraphicElements> GetLinks( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.GraphicElement target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasGraphicElements> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.ShowFormHasGraphicElements>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(source, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasGraphicElements link in links )
			{
				if ( target.Equals(link.GraphicElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ShowFormHasGraphicElements link between a given ShowFormand a GraphicElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.ShowFormHasGraphicElements GetLink( global::Company.MobileDSL.ShowForm source, global::Company.MobileDSL.GraphicElement target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.ShowFormHasGraphicElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.ShowFormHasGraphicElements>(source, global::Company.MobileDSL.ShowFormHasGraphicElements.ShowFormDomainRoleId);
			foreach ( global::Company.MobileDSL.ShowFormHasGraphicElements link in links )
			{
				if ( target.Equals(link.GraphicElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasServiceInvoked
	/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fcda6671-dcdf-437e-91d7-0614d98b8cf8")]
	public partial class MobileAppModelHasServiceInvoked : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasServiceInvoked domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcda6671, 0xdcdf, 0x437e, 0x91, 0xd7, 0x06, 0x14, 0xd9, 0x8b, 0x8c, 0xf8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasServiceInvoked link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ServiceInvoke to use as the target of the relationship.</param>
		public MobileAppModelHasServiceInvoked(MobileAppModel source, ServiceInvoke target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceInvoked(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xe10cafe6, 0x58b4, 0x4a69, 0x89, 0x6d, 0x2d, 0x97, 0x33, 0x82, 0xcb, 0xbd);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceInvoked", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceInvoked/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e10cafe6-58b4-4a69-896d-2d973382cbbd")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ServiceInvoke
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ServiceInvoke element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceInvokeDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ServiceInvoke element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceInvokeDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ServiceInvoke domain role code
		
		/// <summary>
		/// ServiceInvoke domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceInvokeDomainRoleId = new global::System.Guid(0x02cd9aca, 0x5d35, 0x45cc, 0x8f, 0x04, 0x19, 0xf1, 0x80, 0x3a, 0xb1, 0xc7);
		
		/// <summary>
		/// DomainRole ServiceInvoke
		/// Description for Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvoke
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceInvoked/ServiceInvoke.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("02cd9aca-5d35-45cc-8f04-19f1803ab1c7")]
		public virtual ServiceInvoke ServiceInvoke
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceInvoke)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceInvokeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceInvokeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceInvoked of a MobileAppModel
		/// <summary>
		/// Gets a list of ServiceInvoked.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceInvoke> GetServiceInvoked(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceInvoke>, ServiceInvoke>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasServiceInvoked links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> GetLinksToServiceInvoked ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ServiceInvoke link accessor
		/// <summary>
		/// Get the MobileAppModelHasServiceInvoked link to a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceInvoked GetLinkToMobileAppModel (global::Company.MobileDSL.ServiceInvoke serviceInvokeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(serviceInvokeInstance, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.ServiceInvokeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceInvoke not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasServiceInvoked instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasServiceInvoked links between a given MobileAppModel and a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceInvoke target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(source, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceInvoked link in links )
			{
				if ( target.Equals(link.ServiceInvoke) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasServiceInvoked link between a given MobileAppModeland a ServiceInvoke.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceInvoked GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceInvoke target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceInvoked> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceInvoked>(source, global::Company.MobileDSL.MobileAppModelHasServiceInvoked.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceInvoked link in links )
			{
				if ( target.Equals(link.ServiceInvoke) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasServiceMsg
	/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6d7c61f5-6e65-444e-acec-c9cf27106efb")]
	public partial class MobileAppModelHasServiceMsg : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasServiceMsg domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d7c61f5, 0x6e65, 0x444e, 0xac, 0xec, 0xc9, 0xcf, 0x27, 0x10, 0x6e, 0xfb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasServiceMsg link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">ServiceMsg to use as the target of the relationship.</param>
		public MobileAppModelHasServiceMsg(MobileAppModel source, ServiceMsg target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasServiceMsg(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0xc93f33ef, 0xeffe, 0x4817, 0xa9, 0xfb, 0xce, 0xd8, 0xe5, 0xf2, 0x9e, 0x27);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ServiceMsg", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceMsg/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c93f33ef-effe-4817-a9fb-ced8e5f29e27")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a ServiceMsg
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(ServiceMsg element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ServiceMsgDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(ServiceMsg element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ServiceMsgDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region ServiceMsg domain role code
		
		/// <summary>
		/// ServiceMsg domain role Id.
		/// </summary>
		public static readonly global::System.Guid ServiceMsgDomainRoleId = new global::System.Guid(0x911b8a94, 0xa1be, 0x42c5, 0xb9, 0xab, 0x1e, 0x69, 0xcb, 0x48, 0x4a, 0x83);
		
		/// <summary>
		/// DomainRole ServiceMsg
		/// Description for Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsg
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasServiceMsg/ServiceMsg.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("911b8a94-a1be-42c5-b9ab-1e69cb484a83")]
		public virtual ServiceMsg ServiceMsg
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ServiceMsg)DslModeling::DomainRoleInfo.GetRolePlayer(this, ServiceMsgDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ServiceMsgDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ServiceMsg of a MobileAppModel
		/// <summary>
		/// Gets a list of ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ServiceMsg> GetServiceMsg(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ServiceMsg>, ServiceMsg>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasServiceMsg links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceMsg> GetLinksToServiceMsg ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
		}
		#endregion
		#region ServiceMsg link accessor
		/// <summary>
		/// Get the MobileAppModelHasServiceMsg link to a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceMsg GetLinkToMobileAppModel (global::Company.MobileDSL.ServiceMsg serviceMsgInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(serviceMsgInstance, global::Company.MobileDSL.MobileAppModelHasServiceMsg.ServiceMsgDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ServiceMsg not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasServiceMsg instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasServiceMsg links between a given MobileAppModel and a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasServiceMsg> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceMsg target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceMsg> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasServiceMsg>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(source, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceMsg link in links )
			{
				if ( target.Equals(link.ServiceMsg) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasServiceMsg link between a given MobileAppModeland a ServiceMsg.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasServiceMsg GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.ServiceMsg target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasServiceMsg> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasServiceMsg>(source, global::Company.MobileDSL.MobileAppModelHasServiceMsg.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasServiceMsg link in links )
			{
				if ( target.Equals(link.ServiceMsg) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.MobileDSL
{
	/// <summary>
	/// DomainRelationship MobileAppModelHasAppCoded
	/// Description for Company.MobileDSL.MobileAppModelHasAppCoded
	/// </summary>
	[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.MobileDSL.MobileDSLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("34b0437a-d93e-49e9-acf0-6684d68ebdcb")]
	public partial class MobileAppModelHasAppCoded : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MobileAppModelHasAppCoded domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x34b0437a, 0xd93e, 0x49e9, 0xac, 0xf0, 0x66, 0x84, 0xd6, 0x8e, 0xbd, 0xcb);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MobileAppModelHasAppCoded link in the same Partition as the given MobileAppModel
		/// </summary>
		/// <param name="source">MobileAppModel to use as the source of the relationship.</param>
		/// <param name="target">AppCode to use as the target of the relationship.</param>
		public MobileAppModelHasAppCoded(MobileAppModel source, AppCode target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MobileAppModelHasAppCoded.MobileAppModelDomainRoleId, source), new DslModeling::RoleAssignment(MobileAppModelHasAppCoded.AppCodeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasAppCoded(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasAppCoded(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MobileAppModelHasAppCoded(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MobileAppModelHasAppCoded(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MobileAppModel domain role code
		
		/// <summary>
		/// MobileAppModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid MobileAppModelDomainRoleId = new global::System.Guid(0x457c82fa, 0xd6b1, 0x4fc9, 0xb7, 0x51, 0x83, 0xc4, 0x8c, 0xb3, 0x53, 0x1e);
		
		/// <summary>
		/// DomainRole MobileAppModel
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AppCoded", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasAppCoded/MobileAppModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("457c82fa-d6b1-4fc9-b751-83c48cb3531e")]
		public virtual MobileAppModel MobileAppModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MobileAppModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, MobileAppModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MobileAppModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MobileAppModel of a AppCode
		/// <summary>
		/// Gets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MobileAppModel GetMobileAppModel(AppCode element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AppCodeDomainRoleId) as MobileAppModel;
		}
		
		/// <summary>
		/// Sets MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMobileAppModel(AppCode element, MobileAppModel newMobileAppModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AppCodeDomainRoleId, newMobileAppModel);
		}
		#endregion
		#region AppCode domain role code
		
		/// <summary>
		/// AppCode domain role Id.
		/// </summary>
		public static readonly global::System.Guid AppCodeDomainRoleId = new global::System.Guid(0xffb7c7a9, 0x0585, 0x44fa, 0x90, 0x27, 0x7c, 0xfd, 0x4c, 0x36, 0xb2, 0x92);
		
		/// <summary>
		/// DomainRole AppCode
		/// Description for Company.MobileDSL.MobileAppModelHasAppCoded.AppCode
		/// </summary>
		[DslDesign::DisplayNameResource("Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.DisplayName", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.Description", typeof(global::Company.MobileDSL.MobileDSLDomainModel), "Company.MobileDSL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MobileAppModel", PropertyDisplayNameKey="Company.MobileDSL.MobileAppModelHasAppCoded/AppCode.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ffb7c7a9-0585-44fa-9027-7cfd4c36b292")]
		public virtual AppCode AppCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AppCode)DslModeling::DomainRoleInfo.GetRolePlayer(this, AppCodeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AppCodeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AppCoded of a MobileAppModel
		/// <summary>
		/// Gets a list of AppCoded.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AppCode> GetAppCoded(MobileAppModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AppCode>, AppCode>(element, MobileAppModelDomainRoleId);
		}
		#endregion
		#region MobileAppModel link accessor
		/// <summary>
		/// Get the list of MobileAppModelHasAppCoded links to a MobileAppModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasAppCoded> GetLinksToAppCoded ( global::Company.MobileDSL.MobileAppModel mobileAppModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(mobileAppModelInstance, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
		}
		#endregion
		#region AppCode link accessor
		/// <summary>
		/// Get the MobileAppModelHasAppCoded link to a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasAppCoded GetLinkToMobileAppModel (global::Company.MobileDSL.AppCode appCodeInstance)
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(appCodeInstance, global::Company.MobileDSL.MobileAppModelHasAppCoded.AppCodeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AppCode not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MobileAppModelHasAppCoded instance accessors
		
		/// <summary>
		/// Get any MobileAppModelHasAppCoded links between a given MobileAppModel and a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.MobileDSL.MobileAppModelHasAppCoded> GetLinks( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasAppCoded> outLinks = new global::System.Collections.Generic.List<global::Company.MobileDSL.MobileAppModelHasAppCoded>();
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(source, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasAppCoded link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MobileAppModelHasAppCoded link between a given MobileAppModeland a AppCode.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.MobileDSL.MobileAppModelHasAppCoded GetLink( global::Company.MobileDSL.MobileAppModel source, global::Company.MobileDSL.AppCode target )
		{
			global::System.Collections.Generic.IList<global::Company.MobileDSL.MobileAppModelHasAppCoded> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.MobileDSL.MobileAppModelHasAppCoded>(source, global::Company.MobileDSL.MobileAppModelHasAppCoded.MobileAppModelDomainRoleId);
			foreach ( global::Company.MobileDSL.MobileAppModelHasAppCoded link in links )
			{
				if ( target.Equals(link.AppCode) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
