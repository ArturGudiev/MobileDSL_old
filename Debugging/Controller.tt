<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ MobileDSL processor="MobileDSLDirectiveProcessor" requires="fileName='Volunteer.mdsl'" #>

//Generated material. Generating code in C#.
using System;
using Ubiq.Graphics;
namespace Application0{
  public abstract class Controller
    {
        protected Screen Screen;
        protected Application0 app;

        public Controller(Application0 app)
        {
            this.app = app;
            this.Screen = app.Screen;
        }
        public abstract void action();
    }
 


<#
	foreach (Controller controller in this.MobileAppModel.Controllers)
	{
#>
	public class <#= controller.Name #>  : Controller{

<# getPrimitivesFromController(controller); #>
        private static <#= controller.Name #> instance;
        private <#= controller.Name #>(Application0 app) : base(app)
        {
        }

        public static <#= controller.Name #> getInstance(Application0 app)
        {
            if (instance == null)
                instance = new <#= controller.Name #>(app);
            return instance;
        }

        enum <#= controller.Name #>State
        {
        <#
	    foreach (State state in controller.States)
        {
        #>
            <#= state.Name #>,
        <# }#>
        }
        private <#=controller.Name#>State controllerState = <#=controller.Name#>State.<#getMainState(controller);#>;

         public override void action(){          
                 <#makeSwitchStatement(controller);#>

}
        <#makeShowFunctions(controller);#>
    }
<# } #>
}
<#+  //=======================================================  
private void getMainState(Controller controller)  
{foreach (State state in controller.States)
        {if(state.isStartState){#><#=state.Name#><#+}}}#>
<#+  //=======================================================  
private void getPrimitivesFromController(Controller controller)  
{  
	foreach (State state in controller.States)
        {#>
<#+getPrimitivesFromForm(state.ShowForm);#>
<#+}}#>
<#+  //=======================================================  
private void makeSwitchStatement(Controller controller)  
{#>
switch(controllerState){
<#+  
	foreach (State state in controller.States)
        {#> 
case <#=controller.Name#>State.<#=state.Name#>: 
show<#=state.Name#>();
<#+switchController(state);#>
break;
<#+}#>
}
<#+}#>
<#+  //=======================================================  
private void switchController(State state)  
    {  
        if(state.PortFromState!=null){
#> 
if(false ){this.app.currentController = <#=state.PortFromState.TargetPort.Controller.Name#>.getInstance(this.app);
this.app.changed = true;
}
<#+}#> 

<#+foreach (State refState in state.TargetStated)
        {#> 
if(false){controllerState = <#=state.Controller.Name#>State.<#=refState.Name#>;
this.app.changed = true;
}
<#+}#>
<#+}#>

<#+  //=======================================================  
private void makeShowFunctions(Controller controller)  
{  
	foreach (State state in controller.States)
        {#> 
<#+ showState(state);#>
<#+}}#>
<#+  //=======================================================  
private void showState(State state)  
{ #>private void show<#=state.Name#>(){
<#+getPrimitiveConstructorsFromForm(state.ShowForm);#>
var panel = new StackPanel{
Children = {<#+getCellsFromForm(state.ShowForm);#>},
Background = new SolidColorBrush(Colors.<#=state.ShowForm.Background#>),

};
Screen.Content = panel;
}
<#+}#>

<#+  //======================================================
private void getPrimitivesFromForm(ShowForm form)  
{  
	foreach (GraphicElement element in form.GraphicElements){#>
<#+typeOf(element);#> <#= element.Name #>;
<#+}}#>
<#+  //=======================================================
private void getPrimitiveConstructorsFromForm(ShowForm form)  
{  
	foreach (GraphicElement element in form.GraphicElements){#>
<#+constructorOf(element);#> 
<#+}}#>
<#+  //=======================================================
private void getCellsFromForm(ShowForm form)  
{  
	foreach (GraphicElement element in form.GraphicElements){#>
new Cell{ Content = <#=element.Name#>},
<#+}}#>
<#+  //=======================================================  
private void constructorOf(GraphicElement element)  
{  #>
<#+ if(element.GetType() == typeof(Company.MobileDSL.Button)) {#><#=element.Name#> = new Button{
    VerticalAlignment = VerticalAlignment.Center, 
    HorizontalAlignment = HorizontalAlignment.Center, 
    Background = new SolidColorBrush(Colors.Gray), 
    Foreground = new SolidColorBrush(Colors.Black), 
    Padding = new Thickness(Screen.NormalFontSize), 
    WrapContent = true, 
    Font = new Font(new FontFamily("Arial"), 0.5 * Screen.LargeFontSize), 
    Text = "<#=((Company.MobileDSL.Button)element).Text#>"
};<#+}#>

<#+ if(element.GetType() == typeof(Company.MobileDSL.Label)) {#><#=element.Name#> = new TextBlock{
                VerticalAlignment = VerticalAlignment.Center, 
                HorizontalAlignment = HorizontalAlignment.Center, 
                WrapContent = true, 
                Font = new Font(new FontFamily("Arial"), 16),
                Foreground = new SolidColorBrush(Colors.Black),
                Text = "<#=((Company.MobileDSL.Label)element).Text#>"
};<#+}#>


<#+ if(element.GetType() == typeof(Company.MobileDSL.Input)) {
#>
var <#=element.Name#>Left = new TextBlock{
                VerticalAlignment = VerticalAlignment.Center, 
                HorizontalAlignment = HorizontalAlignment.Center, 
                WrapContent = true, 
                Font = new Font(new FontFamily("Arial"), 16),
                Foreground = new SolidColorBrush(Colors.Black),
                Text = "<#=((Company.MobileDSL.Input)element).LeftText#>"
};
var <#=element.Name#>Right = new Input{
    VerticalAlignment = VerticalAlignment.Center, 
    HorizontalAlignment = HorizontalAlignment.Center, 
    Background = new SolidColorBrush(Colors.White), 
    Foreground = new SolidColorBrush(Colors.Black), 
    Padding = new Thickness(Screen.NormalFontSize), 
    WrapContent = true,
    Width = 150,
    Font = new Font(new FontFamily("Arial"), 12),
    InputMode = Ubiq.Graphics.InputMode.<#=((Company.MobileDSL.Input)element).InputMode#>,
    Text = ""
            };
<#=element.Name#> = new StackPanel{ Children = {new Cell{Content = <#=element.Name#>Left}, new Cell{Content = <#=element.Name#>Right},}, Orientation = Orientation.Horizontal};
<#+}#>

<#+}#>
<#+  //=======================================================  
private void typeOf(GraphicElement element)  
{  #>
<#+ if(element.GetType() == typeof(Company.MobileDSL.Button)) {#>Button<#+}#>
<#+ if(element.GetType() == typeof(Company.MobileDSL.Label)) {#>TextBlock<#+}#>
<#+ if(element.GetType() == typeof(Company.MobileDSL.Input)) {#>StackPanel<#+}#>
<#+}#>


